#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
%中英文混排设置%
\usepackage[BoldFont,SlantFont,fallback,CJKchecksingle]{xeCJK}
\setmainfont{DejaVu Serif}%西文衬线字体
\setsansfont{DejaVu Sans}%西文无衬线字体
\setmonofont{DejaVu Sans Mono}%西文等宽字体
\setCJKmainfont{WenQuanYi Micro Hei}%中文衬线字体
\setCJKsansfont{WenQuanYi Micro Hei}%中文无衬线字体
\setCJKmonofont{WenQuanYi Micro Hei Mono}%中文等宽字体
\punctstyle{banjiao}%半角字符
 
%其他中文设置%
\XeTeXlinebreaklocale “zh”%中文断行
\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt%左右弹性间距
\usepackage{indentfirst}%段落首行缩进
\setlength{\parindent}{2em}%缩进两个字符

 
\end_preamble
\options a4paper,xecjk
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package auto
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\font_cjk gbsn

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_author "cnx"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 3
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "unicode=false"
\papersize a4paper
\use_geometry true
\use_amsmath 2
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%其他中文设置% 
\backslash
XeTeXlinebreaklocale “zh”%中文断行 
\backslash
XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt%左右弹性间距 
\backslash
usepackage{indentfirst}%段落首行缩进 
\backslash
setlength{
\backslash
parindent}{2em}%缩进两个字符
\end_layout

\end_inset


\end_layout

\begin_layout Title
从递归说开去
\end_layout

\begin_layout Author
CNX(陈楠昕)
\end_layout

\begin_layout Institute
bobchennan@gmail.com
\end_layout

\begin_layout BeginFrame
声明
\end_layout

\begin_layout Standard
大概YY了一个周末，看了很多东西，开始做这个pdf。本文更多是关于一些方法技巧的介绍以及个人一些小的想法，原创性内容较少。
\end_layout

\begin_layout Standard
另外本文中牵扯到的语言主要有C、C++、C#、Python。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
意图
\end_layout

\begin_layout Standard
为什么想到这个？这个理由会在最后揭晓。大部分我要讲的内容与我的认知过程恰好想反。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
About fac
\end_layout

\begin_layout Standard
考虑到一个常见的求阶乘程序：
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

fac-1.c
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
int fac(int n){
\end_layout

\begin_layout LyX-Code
    return n?n*fac(n-1):1;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
我们不加参数直接编译它：gcc fac-1.c -o fac-1
\end_layout

\begin_layout LyX-Code
在Windows环境下大概13W左右会崩栈
\end_layout

\begin_layout LyX-Code
加上编译优化：gcc fac-1.c -o fac-1 -O2
\end_layout

\begin_layout LyX-Code
不会发生崩栈
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
原因
\end_layout

\begin_layout Standard
函数调用以及局部变量维护通过栈来实现，因此反复递归到一定程度就会崩栈。
\end_layout

\begin_layout Standard
计算4!程序本身调用过程如下：
\end_layout

\begin_layout Standard
(fac 4) 
\end_layout

\begin_layout Standard
(* 4 (fac 3))
\end_layout

\begin_layout Standard
(* 4 (* 3 (fac 2)))
\end_layout

\begin_layout Standard
(* 4 (* 3 (* 2 (fac 1)))) 
\end_layout

\begin_layout Standard
(* 4 (* 3 (* 2 (* 1 (fac 0)))))
\end_layout

\begin_layout Standard
(* 4 (* 3 (* 2 (* 1))))
\end_layout

\begin_layout Standard
(* 4 (* 3 (* 2 1)))
\end_layout

\begin_layout Standard
(* 4 (* 3 2)) 
\end_layout

\begin_layout Standard
(* 4 6) 24
\end_layout

\begin_layout BeginFrame
步骤1
\end_layout

\begin_layout Standard
考虑到这一类问题特殊性，我们可以考虑通过不回溯的方法实现：
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

fac-2.c
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
int fac(int n,int v){
\end_layout

\begin_layout LyX-Code
    return n?fac(n-1,v*n):v;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
当然这段代码依然需要加编译优化O2才能正常运行。但是这段代码有着明显的特点，即函数最后一步是返回关于自身的调用，并且不需要回溯过程，即没有必要每次保存任何局部变
量，这样的递归被称为尾递归。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
尾递归
\end_layout

\begin_layout Standard
尾递归本质上来说就是一种迭代过程，与循环并无区别，因此程序可改成如下代码：
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

fac-3.c
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
int fac(int n,int v){
\end_layout

\begin_layout LyX-Code
    for(;;){
\end_layout

\begin_layout LyX-Code
        if(n==0)return v;
\end_layout

\begin_layout LyX-Code
        v*=n;
\end_layout

\begin_layout LyX-Code
        --n;
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
实际上编译器编译优化就是通过相似原理实现，简单的说就是局部变量不压栈，下次调用直接使用本次空间，或者干脆只使用寄存器。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
其他语言
\end_layout

\begin_layout Standard
C与C++依靠编译优化实现了尾递归，其他语言呢？
\end_layout

\begin_layout Standard
比如Python和Java，C#一般来说是没有尾递归自动优化的能力的，递归调用受到调用栈长度的限制。
\end_layout

\begin_layout Standard
如何解决此问题呢？
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Python
\end_layout

\begin_layout Quotation
Third, I don’t believe in recursion as the basis of all programming.
 This is a fundamental belief of certain computer scientists, especially
 those who love Scheme and like to teach programming by starting with a
 “cons” cell and recursion.
 But to me, seeing recursion as the basis of everything else is just a nice
 theoretical approach to fundamental mathematics (turtles all the way down),
 not a day-to-day tool.(By Guido)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Python2
\end_layout

\begin_layout Standard
但是我们依然可以用一些巧妙的方法来解决这个问题：(catch.py)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
类似的C++实现
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout BeginFrame
C#
\end_layout

\begin_layout Standard
C#中有着更加神奇的方法，叫做Continuation。
\end_layout

\begin_layout Standard
Continuation 是什么？简而言之，就是一种控制结构，利用它可以把当前的执行状态保存起来，以供以后调用。
\end_layout

\begin_layout Standard
简单地说，现在你像持有一个普通对象一样持有一个执行环境，你可以把它保存到任何地方（不再被限制到栈上），并随时再进入到那个执行环境中继续先前中断的执行过程。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Continuation
\end_layout

\begin_layout Standard
打个比方：
\end_layout

\begin_layout Standard
话说你在厨房的冰箱前,考虑来点三明治尝尝。如果这时候你做了个continuation，并将其存放到你的口袋中。然后你把火鸡和面包从冰箱里取出来拿到餐台，并把他们
做成了你想要的三明治.
 此时，如果你把你的continuation从口袋中取出来，并且调用一次的话。你会发现你突然又身处冰箱前, 考虑来点三明治尝尝.
 不过，幸运的是, 此时餐台上已经有了个你想要的三明治。而火鸡和面包都不见了.
 那么，你就可以径直去把它吃掉了。 :-)
\end_layout

\begin_layout Standard
Continuation可以非常容易的实现高级流程控制：大规模退出(非结构化：goto；结构化：异常)、生成器、回溯。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
C#(2)
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "fac.cs"
lstparams "caption={fac.cs}"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
C#(3)
\end_layout

\begin_layout LyX-Code
public static int FibonacciContinuation(int n, Func<int, int> continuation)
 {
\end_layout

\begin_layout LyX-Code
    if (n < 2) return continuation(n);
\end_layout

\begin_layout LyX-Code
    return FibonacciContinuation(n - 1,
\end_layout

\begin_layout LyX-Code
        r1 => FibonacciContinuation(n - 2,
\end_layout

\begin_layout LyX-Code
            r2 => continuation(r1 + r2)));
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout BeginFrame
C++
\end_layout

\begin_layout Standard
\align center
fac-3
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
C++(2)
\end_layout

\begin_layout Standard
\align center
fib.cs
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
My Opinion 1
\end_layout

\begin_layout Standard
传统语言中使用堆栈作为函数参数及局部变量存储位置，具有以下优势：
\end_layout

\begin_layout Itemize
存储速度比堆要快，仅次于寄存器
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
栈数据能够共享
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
便于中断、恢复、嵌套
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
缺点：
\end_layout

\begin_layout Itemize
大小、生存时间固定
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
My Opinion 2
\end_layout

\begin_layout Standard
\align center
Stack
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Downarrow
\]

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\align center
Heap(or queue?)
\end_layout

\begin_layout Standard
函数式语言：Erlang、Scheme等。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Coroutine
\end_layout

\begin_layout Standard
协程看上去与目前所讲的关系不大。
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
事实上确实没太大关系。
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
于是我现在开始真正介绍下背景。。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Background
\end_layout

\begin_layout Standard
某天晚上洗衣服，我向蒋委询问new feature的素材，他跟我提到了下面这个东西(python代码):
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "1.py"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Again
\end_layout

\begin_layout Standard
如何用C和C++完成类似功能？
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Solution1
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "1.c"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
小技巧
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "duff.c"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Solution2
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "2.c"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Solution2-2
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "fib.c"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
define
\end_layout

\begin_layout Standard
\align center
define1.c
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
define(2)
\end_layout

\begin_layout Standard
\align center
define2.c
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
What can we do?
\end_layout

\begin_layout Standard
下面我们来看一下蒋委问题的一个答案，考虑二叉树遍历，C#中我们可以通过高阶迭代器实现(tree.cs)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
the same in C
\end_layout

\begin_layout Standard
\align center
tree.c
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
What can coroutine do?
\end_layout

\begin_layout Standard
比较精妙，说不太清楚。
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
目前资料中提到的比较多的是速度优势，特别是相比continuation。
\end_layout

\begin_layout Standard
当然还有以下特点：
\end_layout

\begin_layout Itemize
避免了传统的函数调用栈，使得无限递归成为可能
\end_layout

\begin_layout Itemize
用户态的线程调度，极大降低上下文切换的开销，使得近乎无限并发的“微线程”成为可能
\end_layout

\begin_layout Itemize
由于可以在用户态进行手工线程调度，这样可以避免锁机制
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
举一个例子，服务器的发展是多进程=>多线程=>异步=>协程。而现在主流的高性能服务器都是基于异步的(lighttpd、nginx)，但实测协程速度更加惊人(py
thon stackless)。
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Reference
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

维基百科
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

各种网络blog
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
