package cnx.syntactic;

import java.io.*;
import cnx.ast.*;

action code {:
  static cnx.symbol.Symbol symbol(String s) {
    return cnx.symbol.Symbol.symbol(s);
  }
:};

parser code {:
  public void report_error(String message, Object info) {/*
    StringBuffer m = new StringBuffer("\tParsing error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

      if (s.left >= 0) {
        m.append(" in line " + (s.left +1 ));
        if (s.right >= 0) {
          m.append(", column " + (s.right + 1));
        }
      }
    }
    m.append(" : " + message);
    System.err.println(m);*/
  }
	public void report_fatal_error(String message, Object info) {
		fatalError = true;
		report_error(message, info);
		System.exit(1);
	}

	public boolean error = false;
	public boolean fatalError = false;

	public Parser(InputStream inp) {
		this(new Yylex(inp));
	}
:};

terminal      TYPEDEF,VOID,CHAR,INT,STRUCT,UNION,IF,ELSE,WHILE,FOR,CONTINUE,BREAK,RETURN,SIZEOF;
terminal      LPAREN,RPAREN,SEMICOLON,COMMA,ASSIGN,LBRACE,RBRACE,LBRACK,RBRACK,BITOR,INDEX,BITAND,LT,GT,PLUS,MINUS,ASTER,DIVIDE,MOD,BITNOT,NOT,DOT;
terminal      OR,AND,EQ,NE,LE,GE,SHL,SHR,INC,DEC,PTR,ELLIPSIS;
terminal      MULASS,DIVASS,MODASS,ADDASS,SUBASS,SHLASS,SHRASS,ANDASS,XORASS,ORASS;
terminal int NUM;
terminal String STR,ID,TYPEID;
terminal char CHR;

non terminal Additive_expression additive_expression;
non terminal Additive_operator additive_operator;
non terminal And_expression and_expression;
non terminal Arguments arguments;
non terminal Assignment_expression assignment_expression;
non terminal Assignment_operator assignment_operator;
non terminal Cast_expression cast_expression;
non terminal Compound_statement compound_statement;
non terminal Constant constant;
non terminal Constant_expression constant_expression;
non terminal Constant_expressions constant_expressions;
non terminal Declaration declaration;
non terminal Declarations declarations;
non terminal Declarator declarator;
non terminal Declarators declarators;
non terminal Equality_expression equality_expression;
non terminal Equality_operator equality_operator;
non terminal Exclusive_or_expression exclusive_or_expression;
non terminal Expression expression;
non terminal Expression_statement expression_statement;
non terminal Expression fors;
non terminal Function_definition function_definition;
non terminal Inclusive_or_expression inclusive_or_expression;
non terminal Init_declarator init_declarator;
non terminal Init_declarators init_declarators;
non terminal Initializer initializer;
non terminal Initializers initializers;
non terminal Iteration_statement iteration_statement;
non terminal Jump_statement jump_statement;
non terminal Logical_and_expression logical_and_expression;
non terminal Logical_or_expression logical_or_expression;
non terminal Multiplicative_expression multiplicative_expression;
non terminal Multiplicative_operator multiplicative_operator;
non terminal Parameters parameters;
non terminal Plain_declaration plain_declaration;
non terminal Plain_declarations plain_declarations;
non terminal Plain_declarator plain_declarator;
non terminal Postfix_expression postfix_expression;
non terminal Primary_expression primary_expression;
non terminal Prog prog;
non terminal Program program;
non terminal Relational_expression relational_expression;
non terminal Relational_operator relational_operator;
non terminal Selection_statement selection_statement;
non terminal Shift_expression shift_expression;
non terminal Shift_operator shift_operator;
non terminal Statement statement;
non terminal Statements statements;
non terminal Boolean struct_or_union;
non terminal Structs structs;
non terminal Type_name type_name;
non terminal Type_specifier type_specifier;
non terminal Unary_expression unary_expression;
non terminal Unary_operator unary_operator;

precedence left ELSE;
precedence left COMMA;
precedence right ASSIGN,MULASS,DIVASS,MODASS,ADDASS,SUBASS,SHLASS,SHRASS,ANDASS,ORASS,XORASS;
precedence left OR;
precedence left AND;
precedence left BITOR;
precedence left INDEX;
precedence nonassoc EQ,NE;
precedence nonassoc LT,LE,GE,GT;
precedence left SHL,SHR;
precedence left DIVIDE,MOD;
precedence right SIZEOF,BITNOT;

start with program;

 program::= prog:x {:RESULT=new Program(x);:} 
        | program:x prog:y {:RESULT=new Program(x,y);:}
        ;

 prog::= declaration:x {:RESULT=x;:} 
      | function_definition:x {:RESULT=x;:}
      ;
 
 declaration::= TYPEDEF {:ParserTest.beginTypedef();:} type_specifier:x declarators:y SEMICOLON {:ParserTest.endTypedef();RESULT=new Declaration(x,y);:}
            | type_specifier:x init_declarators:y SEMICOLON {:ParserTest.endVardef();RESULT=new Declaration(x,y);:}
            | type_specifier:x SEMICOLON {:RESULT=new Declaration(x);:}
            ;
 
 function_definition::= type_specifier:x plain_declarator:y LPAREN parameters:z RPAREN compound_statement:s {:RESULT=new Function_definition(x,y,z,s);:}
                    | type_specifier:x plain_declarator:y LPAREN RPAREN compound_statement:z {:RESULT=new Function_definition(x,y,z);:}
                    ;
 
 parameters::= plain_declaration:x plain_declarations:y COMMA ELLIPSIS {:RESULT=new Parameters(x,y,true);:}
           | plain_declaration:x plain_declarations:y {:RESULT=new Parameters(x,y,false);:}
           | plain_declaration:x COMMA ELLIPSIS {:RESULT=new Parameters(x,true);:}
           | plain_declaration:x {:RESULT=new Parameters(x,false);:}
           ;

 plain_declarations::= COMMA plain_declaration:x {:RESULT=new Plain_declarations(x);:}
     | plain_declarations:x COMMA plain_declaration:y {:RESULT=x.add(y);:}
     ;
 
 declarators::= declarators:x COMMA declarator:y {:RESULT=x.add(y);:}
            | declarator:x {:RESULT=new Declarators(x);:}
            ;
 
 init_declarators::= init_declarators:x COMMA init_declarator:y {:RESULT=x.add(y);:}
                 | init_declarator:x {:ParserTest.beginVardef();RESULT=new Init_declarators(x);:}
                 ;
 
 init_declarator::= declarator:x ASSIGN initializer:y {:RESULT=new Init_declarator(x,y);:}
                | declarator:x {:RESULT=new Init_declarator(x);:}
                ;
 
 initializer::= assignment_expression:x {:RESULT=new Initializer(x);:}
            | LBRACE initializers:x RBRACE {:RESULT=new Initializer(x);:}
            ;

 initializers::=initializer:x {:RESULT=new Initializers(x);:}
      | initializers:x COMMA initializer:y {:RESULT=x.add(y);:}
      ;
 
 type_specifier::= VOID  {:RESULT=new VoidType();:}
               | CHAR:x  {:RESULT=new CharType();:}
               | INT:x  {:RESULT=new IntType();:}
               | TYPEID:i {:RESULT=new Id_type(symbol(i));:}
               | struct_or_union:x ID:i {:ParserTest.endRecorddef();:} LBRACE structs:y RBRACE {:RESULT=new Record_type(x,symbol(i),y);:}
               | struct_or_union:x  LBRACE {:ParserTest.endRecorddef();:} structs:y RBRACE {:RESULT=new Record_type(x,y);:}
               | struct_or_union:x ID:i {:ParserTest.endRecorddef();RESULT=new Id_type(symbol(i));:}
               ;

 structs::=type_specifier:x declarators:y SEMICOLON {:RESULT=new Structs(x,y);:}
      | structs:x type_specifier:y declarators:z SEMICOLON{:RESULT=x.add(y,z);:}
      ;
 
 struct_or_union::= STRUCT {:ParserTest.beginRecorddef();RESULT=true;:}
                | UNION{:ParserTest.beginRecorddef();RESULT=false;:}
                ;
 
 plain_declaration::= type_specifier:x declarator:y{:RESULT=new Plain_declaration(x,y);:}
                  ;
 
 declarator::= plain_declarator:x LPAREN parameters:y RPAREN{:RESULT=new Declarator(x,y);:}
           | plain_declarator:x LPAREN RPAREN{:RESULT=new Declarator(x,true);:}
           | plain_declarator:x constant_expressions:y{:RESULT=new Declarator(x,y);:}
           | plain_declarator:x {:RESULT=new Declarator(x,false);:}
           ;

 constant_expressions ::= LBRACK constant_expression:x RBRACK  {:RESULT=new Constant_expressions(x);:}
      | constant_expressions:x LBRACK constant_expression:y RBRACK {:RESULT=x.add(y);:}
      ;
 
 plain_declarator::= ASTER plain_declarator:x {:RESULT=new Plain_declarator(x);:}
                 | ID:i  {:RESULT=new Plain_declarator(symbol(i));if(ParserTest.isTypedef())ParserTest.addTypeID(i);:}
                 ;

 statement::= expression_statement:x {:RESULT=x;:}
          | compound_statement:x {:RESULT=x;:}
          | selection_statement:x {:RESULT=x;:}
          | iteration_statement:x {:RESULT=x;:}
          | jump_statement:x {:RESULT=x;:}
          ;
 
 expression_statement::= expression:x SEMICOLON {:RESULT=new Expression_statement(x);:}
                     | SEMICOLON {:RESULT=null;:}
                     ;
 
 compound_statement::= LBRACE{:ParserTest.beginScope();:} declarations:x statements:y RBRACE {:ParserTest.endScope();RESULT=new Compound_statement(x,y);:};

 declarations::= /* empty */ {:RESULT=new Declarations();:}
      | declarations:x declaration:y {:RESULT=x.add(y);:}
      ;

 statements::= /* empty */ {:RESULT=new Statements();:}
      | statements:x statement:y {:RESULT=x.add(y);:}
      ;
 
 selection_statement::= IF LPAREN expression:x RPAREN statement:y {:RESULT=new Selection_statement(x,y);:}
                    | IF LPAREN expression:x RPAREN statement:y ELSE statement:z {:RESULT=new Selection_statement(x,y,z);:}
                    ;
 
 iteration_statement::= WHILE LPAREN expression:x RPAREN statement:y {:RESULT=new While_statement(x,y);:}
                    | FOR LPAREN fors:x fors:y expression:z RPAREN statement:s {:RESULT=new For_statement(x,y,z,s);:}
                    | FOR LPAREN fors:x fors:y  RPAREN statement:s {:RESULT=new For_statement(x,y,null,s);:}
                    ;
 
 jump_statement::= CONTINUE SEMICOLON {:RESULT=new Continue_statement();:}
               | BREAK SEMICOLON {:RESULT=new Break_statement();:}
               | RETURN fors:x {:RESULT=new Return_statement(x);:}
               ;

 fors::=SEMICOLON  {:RESULT=null;:}
     | expression:x SEMICOLON {:RESULT=x;:}
     ;

 expression::= expression:x COMMA assignment_expression:y {:RESULT=x.add(y);:}
           | assignment_expression:x {:RESULT=new Expression(x);:}
           ;
 
 assignment_expression::= logical_or_expression:x {:RESULT=new Assignment_expression(x);:}
                      | unary_expression:x assignment_operator:y assignment_expression:z {:RESULT=new Assignment_expression(x,y,z);:}
                      ;
 
 assignment_operator::= ASSIGN  {:RESULT=Assignment_operator.ASSIGN;:}
                    | MULASS  {:RESULT=Assignment_operator.MULASS;:}
                    | DIVASS  {:RESULT=Assignment_operator.DIVASS;:}
                    | MODASS  {:RESULT=Assignment_operator.MODASS;:}
                    | ADDASS  {:RESULT=Assignment_operator.ADDASS;:}
                    | SUBASS  {:RESULT=Assignment_operator.SUBASS;:}
                    | SHLASS  {:RESULT=Assignment_operator.SHLASS;:}
                    | SHRASS  {:RESULT=Assignment_operator.SHRASS;:}
                    | ANDASS  {:RESULT=Assignment_operator.ANDASS;:}
                    | XORASS  {:RESULT=Assignment_operator.XORASS;:}
                    | ORASS {:RESULT=Assignment_operator.ORASS;:}
                    ;
 
 constant_expression::= logical_or_expression:x {:RESULT=x;:}
                    ;
 
 logical_or_expression::= logical_or_expression:x OR logical_and_expression:y {:RESULT=new Logical_or_expression(x,y);:}
                      | logical_and_expression:x {:RESULT=new Logical_or_expression(x);:}
                      ;
 
 logical_and_expression::= logical_and_expression:x AND inclusive_or_expression:y {:RESULT=new Logical_and_expression(x,y);:}
                       | inclusive_or_expression:x  {:RESULT=new Logical_and_expression(x);:}
                       ;

 inclusive_or_expression::= inclusive_or_expression:x BITOR exclusive_or_expression:y {:RESULT=new Inclusive_or_expression(x,y);:}
                        | exclusive_or_expression:x {:RESULT=new Inclusive_or_expression(x);:}
                        ;
 
 exclusive_or_expression::= exclusive_or_expression:x INDEX and_expression:y {:RESULT=new Exclusive_or_expression(x,y);:}
                        | and_expression:x {:RESULT=new Exclusive_or_expression(x);:}
                        ;
 
 and_expression::= and_expression:x BITAND equality_expression:y {:RESULT=new And_expression(x,y);:}
               | equality_expression:x {:RESULT=new And_expression(x);:}
               ;
 
 equality_expression::= equality_expression:x equality_operator:y relational_expression:z {:RESULT=new Equality_expression(x,y,z);:}
                    | relational_expression:x {:RESULT=new Equality_expression(x);:}
                    ;
 
 equality_operator::= EQ  {:RESULT=Equality_operator.EQ;:} 
                  | NE {:RESULT=Equality_operator.NE;:}
                  ;
 
 relational_expression::= relational_expression:x relational_operator:y shift_expression:z {:RESULT=new Relational_expression(x,y,z);:}
                      | shift_expression:x {:RESULT=new Relational_expression(x);:}
                      ;
 
 relational_operator::= LT  {:RESULT=Relational_operator.LT;:}
                    | GT  {:RESULT=Relational_operator.GT;:}
                    | LE  {:RESULT=Relational_operator.LE;:}
                    | GE {:RESULT=Relational_operator.GE;:}
                    ;
 
 shift_expression::= shift_expression:x shift_operator:y additive_expression:z {:RESULT=new Shift_expression(x,y,z);:}
                 | additive_expression:x {:RESULT=new Shift_expression(x);:}
                 ;
 
 shift_operator::= SHL  {:RESULT=Shift_operator.SHL;:}
               | SHR {:RESULT=Shift_operator.SHR;:}
               ;
 
 additive_expression::= additive_expression:x additive_operator:y multiplicative_expression:z {:RESULT=new Additive_expression(x,y,z);:}
                    | multiplicative_expression:x {:RESULT=new Additive_expression(x);:}
                    ;
 
 additive_operator::= PLUS  {:RESULT=Additive_operator.PLUS;:}
                  | MINUS {:RESULT=Additive_operator.MINUS;:}
                  ;
 
 multiplicative_expression::= multiplicative_expression:x multiplicative_operator:y cast_expression:z {:RESULT=new Multiplicative_expression(x,y,z);:}
                          | cast_expression:x {:RESULT=new Multiplicative_expression(x);:}
                          ;
 
 multiplicative_operator::= ASTER  {:RESULT=Multiplicative_operator.MULTIPLY;:}
                        | DIVIDE  {:RESULT=Multiplicative_operator.DIVIDE;:}
                        | MOD {:RESULT=Multiplicative_operator.MOD;:}
                        ;
 
 cast_expression::= unary_expression:x {:RESULT=new Cast_expression(x);:}
                | LPAREN type_name:x RPAREN cast_expression:y {:RESULT=new Cast_expression(x,y);:}
                ;
 
 type_name::= type_name:x ASTER {:RESULT=new Type_name(x);:}

          | type_specifier:x {:RESULT=new Type_name(x);:}
          ;
 
 unary_expression::= postfix_expression:x {:RESULT=x;:}
                 | INC unary_expression:x {:RESULT=new Unary_expressions(Unary_expressions_operator.INC,x);:}
                 | DEC unary_expression:x {:RESULT=new Unary_expressions(Unary_expressions_operator.DEC,x);:}
                 | unary_operator:x cast_expression:y {:RESULT=new Unary_cast_expression(x,y);:}
                 | SIZEOF unary_expression:x {:RESULT=new Unary_expressions(Unary_expressions_operator.SIZEOF,x);:}
                 | SIZEOF LPAREN type_name:x RPAREN {:RESULT=new Type_size(x);:}
                 ;
 
 unary_operator::= BITAND  {:RESULT=Unary_operator.BITAND;:}
               | ASTER  {:RESULT=Unary_operator.ASTER;:}
               | PLUS  {:RESULT=Unary_operator.PLUS;:}
               | MINUS  {:RESULT=Unary_operator.MINUS;:}
               | BITNOT  {:RESULT=Unary_operator.BITNOT;:}
               | NOT {:RESULT=Unary_operator.NOT;:}
               ;
                   
 postfix_expression::= postfix_expression:x LBRACK expression:y RBRACK {:RESULT=new Array_expression(x,y);:}
        			| postfix_expression:x LPAREN arguments:y RPAREN {:RESULT=new Function_expression(x,y);:}
        			| postfix_expression:x LPAREN RPAREN {:RESULT=new Function_expression(x,null);:}
        			| postfix_expression:x DOT ID:i {:RESULT=new Dot_expression(x,symbol(i));:}
        			| postfix_expression:x PTR ID:i {:RESULT=new Pointer_expression(x,symbol(i));:}
        			| postfix_expression:x INC {:RESULT=new Inc_expression(x);:}
        			| postfix_expression:x DEC {:RESULT=new Dec_expression(x);:}
        			| primary_expression:x {:RESULT=x;:}
        			;
 
 arguments::= arguments:x COMMA assignment_expression:y {:RESULT=x.add(y);:}
          | assignment_expression:x {:RESULT=new Arguments(x);:}
          ;
 
 primary_expression::= ID:i {:RESULT=new Id(symbol(i));:}
                   | constant:x {:RESULT=x;:}
                   | STR:i {:RESULT=new StringLiteral(i);:}
                   | LPAREN expression:x RPAREN {:RESULT=x;:}
                   ;
 
 constant::= NUM:i  {:RESULT=new IntLiteral(i);:}
         | CHR:i  {:RESULT=new CharLiteral(i);:}
         ;
