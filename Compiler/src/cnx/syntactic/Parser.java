
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 24 15:02:53 CST 2013
//----------------------------------------------------

package cnx.syntactic;

import java.io.*;
import cnx.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 24 15:02:53 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\052\003\000\002\052" +
    "\004\000\002\051\003\000\002\051\003\000\002\070\002" +
    "\000\002\015\007\000\002\015\005\000\002\015\004\000" +
    "\002\027\010\000\002\027\007\000\002\043\006\000\002" +
    "\043\004\000\002\043\005\000\002\043\003\000\002\045" +
    "\004\000\002\045\005\000\002\020\005\000\002\020\003" +
    "\000\002\032\005\000\002\032\003\000\002\031\005\000" +
    "\002\031\003\000\002\033\003\000\002\033\005\000\002" +
    "\034\003\000\002\034\005\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\071\002" +
    "\000\002\065\010\000\002\072\002\000\002\065\007\000" +
    "\002\065\004\000\002\063\005\000\002\063\006\000\002" +
    "\062\003\000\002\062\003\000\002\044\004\000\002\017" +
    "\006\000\002\017\005\000\002\017\004\000\002\017\003" +
    "\000\002\014\005\000\002\014\006\000\002\046\004\000" +
    "\002\046\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\025" +
    "\004\000\002\025\003\000\002\073\002\000\002\011\007" +
    "\000\002\016\002\000\002\016\004\000\002\061\002\000" +
    "\002\061\004\000\002\055\007\000\002\055\011\000\002" +
    "\035\007\000\002\035\011\000\002\035\010\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\026\003" +
    "\000\002\026\004\000\002\024\005\000\002\024\003\000" +
    "\002\006\003\000\002\006\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\013\003\000\002\040\005\000\002\040\003\000\002" +
    "\037\005\000\002\037\003\000\002\030\005\000\002\030" +
    "\003\000\002\023\005\000\002\023\003\000\002\004\005" +
    "\000\002\004\003\000\002\021\005\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\053\005\000\002" +
    "\053\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\056\005\000\002\056\003" +
    "\000\002\057\003\000\002\057\003\000\002\002\005\000" +
    "\002\002\003\000\002\003\003\000\002\003\003\000\002" +
    "\041\005\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\010\003\000\002\010\006" +
    "\000\002\064\004\000\002\064\003\000\002\066\003\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\066\004\000\002\066\006\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\047\006\000\002\047\006\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\004\000\002\047\004\000\002\047\003\000\002\005" +
    "\005\000\002\005\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\005\000\002\012\003\000" +
    "\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\020\004\015\005\012\006\020\007\004\010" +
    "\011\011\010\101\017\001\002\000\012\023\uffe4\024\uffe4" +
    "\042\uffe4\100\uffe4\001\002\000\006\027\351\100\350\001" +
    "\002\000\022\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\101\ufffd\001\002\000\022\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\101\ufffe" +
    "\001\002\000\006\027\uffda\100\uffda\001\002\000\006\027" +
    "\uffdb\100\uffdb\001\002\000\012\023\uffe6\024\uffe6\042\uffe6" +
    "\100\uffe6\001\002\000\022\002\346\004\015\005\012\006" +
    "\020\007\004\010\011\011\010\101\017\001\002\000\022" +
    "\002\000\004\000\005\000\006\000\007\000\010\000\011" +
    "\000\101\000\001\002\000\016\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\101\ufffc\001\002\000\010\024\023\042" +
    "\024\100\021\001\002\000\012\023\uffe3\024\uffe3\042\uffe3" +
    "\100\uffe3\001\002\000\012\023\uffe5\024\uffe5\042\uffe5\100" +
    "\uffe5\001\002\000\016\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\031\uffd1\001\002\000\010\024\uffeb\025\uffeb\026" +
    "\326\001\002\000\100\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\027\ufff9" +
    "\030\ufff9\035\ufff9\040\ufff9\041\ufff9\042\ufff9\045\ufff9\046" +
    "\ufff9\060\ufff9\061\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9" +
    "\102\ufff9\001\002\000\006\042\024\100\021\001\002\000" +
    "\006\024\uffed\025\uffed\001\002\000\006\024\323\025\322" +
    "\001\002\000\014\022\032\024\uffd5\025\uffd5\026\uffd5\031" +
    "\031\001\002\000\014\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\031\317\001\002\000\036\021\071\022\062\035\124\040" +
    "\100\041\065\042\060\045\125\046\067\060\076\061\127" +
    "\076\077\077\054\100\102\102\126\001\002\000\020\005" +
    "\012\006\020\007\004\010\011\011\010\023\035\101\017" +
    "\001\002\000\006\023\ufff3\025\305\001\002\000\006\042" +
    "\024\100\021\001\002\000\012\024\uffd7\025\uffd7\026\uffd7" +
    "\027\040\001\002\000\004\023\037\001\002\000\012\024" +
    "\uffd8\025\uffd8\026\uffd8\027\040\001\002\000\076\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\024\uffc9\027\uffc9\030\uffc9\035\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\045\uffc9\046\uffc9\060\uffc9\061\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\101\uffc9\102\uffc9\001\002\000\022\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\101\ufff8" +
    "\001\002\000\076\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\024\uffc7\027\uffc7\030\uffc7\035" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\045\uffc7\046\uffc7\060\uffc7" +
    "\061\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\001" +
    "\002\000\076\004\015\005\012\006\020\007\004\010\011" +
    "\011\010\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\024\uffc5\027\uffc5\030\uffc5\035\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\045\uffc5\046\uffc5\060\uffc5\061" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\101\017\102\uffc5\001\002" +
    "\000\076\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\027\uffc6\030\uffc6\035\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\045\uffc6\046\uffc6\060\uffc6\061\uffc6" +
    "\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000" +
    "\060\012\101\014\120\015\064\016\061\017\111\020\106" +
    "\021\071\022\062\024\070\027\040\030\121\035\124\040" +
    "\100\041\065\042\060\045\125\046\067\060\076\061\127" +
    "\076\077\077\054\100\102\102\126\001\002\000\010\024" +
    "\023\042\024\100\021\001\002\000\016\022\050\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\031\031\001\002\000\020\005" +
    "\012\006\020\007\004\010\011\011\010\023\051\101\017" +
    "\001\002\000\012\023\uffd7\024\uffd7\025\uffd7\026\uffd7\001" +
    "\002\000\004\023\053\001\002\000\012\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\001\002\000\122\022\uff6c\023\uff6c\024" +
    "\uff6c\025\uff6c\026\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c" +
    "\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042" +
    "\uff6c\043\uff6c\044\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c" +
    "\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061" +
    "\uff6c\062\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c" +
    "\071\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\001\002\000" +
    "\052\023\uff94\024\uff94\025\uff94\030\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\146\041\147\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\001\002\000\062\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd" +
    "\027\uffcd\030\uffcd\035\uffcd\040\uffcd\041\uffcd\042\uffcd\045" +
    "\uffcd\046\uffcd\060\uffcd\061\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\102\uffcd\001\002\000\062\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc" +
    "\027\uffcc\030\uffcc\035\uffcc\040\uffcc\041\uffcc\042\uffcc\045" +
    "\uffcc\046\uffcc\060\uffcc\061\uffcc\076\uffcc\077\uffcc\100\uffcc" +
    "\102\uffcc\001\002\000\036\021\uff7d\022\uff7d\035\uff7d\040" +
    "\uff7d\041\uff7d\042\uff7d\045\uff7d\046\uff7d\060\uff7d\061\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\102\uff7d\001\002\000\004\024" +
    "\302\001\002\000\052\005\012\006\020\007\004\010\011" +
    "\011\010\021\071\022\062\035\124\040\100\041\065\042" +
    "\060\045\125\046\067\060\076\061\127\076\077\077\054" +
    "\100\102\101\017\102\126\001\002\000\062\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\024\uffcf\027\uffcf\030\uffcf\035\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\045\uffcf\046\uffcf\060\uffcf\061\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\102\uffcf\001\002\000\004\022\267\001" +
    "\002\000\036\021\uff7b\022\uff7b\035\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\045\uff7b\046\uff7b\060\uff7b\061\uff7b\076\uff7b\077" +
    "\uff7b\100\uff7b\102\uff7b\001\002\000\122\022\uff71\023\uff71" +
    "\024\uff71\025\uff71\026\uff71\030\uff71\031\uff71\032\uff71\033" +
    "\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71" +
    "\042\uff71\043\uff71\044\uff71\047\uff71\050\uff71\051\uff71\052" +
    "\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71" +
    "\061\uff71\062\uff71\064\uff71\065\uff71\066\uff71\067\uff71\070" +
    "\uff71\071\uff71\072\uff71\073\uff71\074\uff71\075\uff71\001\002" +
    "\000\036\021\uff79\022\uff79\035\uff79\040\uff79\041\uff79\042" +
    "\uff79\045\uff79\046\uff79\060\uff79\061\uff79\076\uff79\077\uff79" +
    "\100\uff79\102\uff79\001\002\000\062\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\024\uffca\027\uffca\030\uffca\035\uffca\040\uffca\041\uffca\042" +
    "\uffca\045\uffca\046\uffca\060\uffca\061\uffca\076\uffca\077\uffca" +
    "\100\uffca\102\uffca\001\002\000\036\021\071\022\262\035" +
    "\124\040\100\041\065\042\060\045\125\046\067\060\076" +
    "\061\127\076\077\077\054\100\102\102\126\001\002\000" +
    "\016\023\uffb7\024\uffb7\025\uffb7\030\uffb7\032\uffb7\050\257" +
    "\001\002\000\032\023\uffa0\024\uffa0\025\uffa0\030\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\050\uffa0\051\uffa0\052\177" +
    "\053\201\001\002\000\024\023\uffa4\024\uffa4\025\uffa4\030" +
    "\uffa4\032\uffa4\033\uffa4\034\173\050\uffa4\051\uffa4\001\002" +
    "\000\060\023\uff8c\024\uff8c\025\uff8c\030\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\001\002\000\036" +
    "\021\071\022\160\035\124\040\100\041\065\042\060\045" +
    "\125\046\067\060\076\061\127\076\077\077\054\100\102" +
    "\102\126\001\002\000\122\022\uff6a\023\uff6a\024\uff6a\025" +
    "\uff6a\026\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043" +
    "\uff6a\044\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a" +
    "\054\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a\062" +
    "\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a" +
    "\072\uff6a\073\uff6a\074\uff6a\075\uff6a\001\002\000\036\021" +
    "\uff7c\022\uff7c\035\uff7c\040\uff7c\041\uff7c\042\uff7c\045\uff7c" +
    "\046\uff7c\060\uff7c\061\uff7c\076\uff7c\077\uff7c\100\uff7c\102" +
    "\uff7c\001\002\000\004\022\250\001\002\000\122\022\uff6e" +
    "\023\uff6e\024\uff6e\025\uff6e\026\uff6e\030\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e" +
    "\041\uff6e\042\uff6e\043\uff6e\044\uff6e\047\uff6e\050\uff6e\051" +
    "\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e" +
    "\060\uff6e\061\uff6e\062\uff6e\064\uff6e\065\uff6e\066\uff6e\067" +
    "\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e" +
    "\001\002\000\006\024\247\025\162\001\002\000\060\012" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\024\uffc4\027\uffc4\030\uffc4\035\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\045\uffc4\046\uffc4\060\uffc4\061\uffc4\076\uffc4" +
    "\077\uffc4\100\uffc4\102\uffc4\001\002\000\106\023\uff88\024" +
    "\uff88\025\uff88\026\242\030\uff88\032\uff88\033\uff88\034\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\057\uff88\064\233\065\237\066\243\067" +
    "\244\070\240\071\232\072\236\073\245\074\235\075\234" +
    "\001\002\000\040\021\071\022\062\024\226\035\124\040" +
    "\100\041\065\042\060\045\125\046\067\060\076\061\127" +
    "\076\077\077\054\100\102\102\126\001\002\000\122\022" +
    "\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\030\uff6d\031\uff6d" +
    "\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\047\uff6d\050\uff6d" +
    "\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057" +
    "\uff6d\060\uff6d\061\uff6d\062\uff6d\064\uff6d\065\uff6d\066\uff6d" +
    "\067\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d\075" +
    "\uff6d\001\002\000\062\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\027" +
    "\uffce\030\uffce\035\uffce\040\uffce\041\uffce\042\uffce\045\uffce" +
    "\046\uffce\060\uffce\061\uffce\076\uffce\077\uffce\100\uffce\102" +
    "\uffce\001\002\000\004\024\225\001\002\000\122\022\211" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\030\uff84\031\206\032" +
    "\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\047\212\050\uff84\051" +
    "\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84" +
    "\060\205\061\207\062\210\064\uff84\065\uff84\066\uff84\067" +
    "\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84" +
    "\001\002\000\020\023\uffa8\024\uffa8\025\uffa8\030\uffa8\032" +
    "\uffa8\050\uffa8\051\203\001\002\000\046\023\uff9a\024\uff9a" +
    "\025\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\144\057\142\001\002\000\026\023\uffa2\024" +
    "\uffa2\025\uffa2\030\uffa2\032\uffa2\033\uffa2\034\uffa2\035\175" +
    "\050\uffa2\051\uffa2\001\002\000\022\023\uffa6\024\uffa6\025" +
    "\uffa6\030\uffa6\032\uffa6\033\171\050\uffa6\051\uffa6\001\002" +
    "\000\012\023\uffb8\024\uffb8\025\uffb8\032\uffb8\001\002\000" +
    "\004\022\165\001\002\000\102\002\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\027\uffc8\030\uffc8\035\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\045\uffc8\046\uffc8\060\uffc8\061\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\001\002\000\060\023\uff90\024" +
    "\uff90\025\uff90\030\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\041\uff90\042\153\043\155\044" +
    "\152\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90" +
    "\056\uff90\057\uff90\001\002\000\062\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\024\uffd0\027\uffd0\030\uffd0\035\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\045\uffd0\046\uffd0\060\uffd0\061\uffd0\076\uffd0\077\uffd0" +
    "\100\uffd0\102\uffd0\001\002\000\036\021\uff7e\022\uff7e\035" +
    "\uff7e\040\uff7e\041\uff7e\042\uff7e\045\uff7e\046\uff7e\060\uff7e" +
    "\061\uff7e\076\uff7e\077\uff7e\100\uff7e\102\uff7e\001\002\000" +
    "\036\021\uff7a\022\uff7a\035\uff7a\040\uff7a\041\uff7a\042\uff7a" +
    "\045\uff7a\046\uff7a\060\uff7a\061\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\102\uff7a\001\002\000\122\022\uff69\023\uff69\024\uff69" +
    "\025\uff69\026\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034" +
    "\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69" +
    "\043\uff69\044\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053" +
    "\uff69\054\uff69\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69" +
    "\062\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070\uff69\071" +
    "\uff69\072\uff69\073\uff69\074\uff69\075\uff69\001\002\000\036" +
    "\021\071\022\160\035\124\040\100\041\065\042\060\045" +
    "\125\046\067\060\076\061\127\076\077\077\054\100\102" +
    "\102\126\001\002\000\042\023\uff9e\024\uff9e\025\uff9e\030" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\134\037\135" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\137\055\140\001" +
    "\002\000\036\021\071\022\062\035\124\040\100\041\065" +
    "\042\060\045\125\046\067\060\076\061\127\076\077\077" +
    "\054\100\102\102\126\001\002\000\106\023\uff81\024\uff81" +
    "\025\uff81\026\uff81\030\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\057\uff81\064\uff81\065\uff81\066\uff81\067\uff81" +
    "\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81\001" +
    "\002\000\106\023\uff88\024\uff88\025\uff88\026\uff88\030\uff88" +
    "\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\050\uff88\051\uff88" +
    "\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\064" +
    "\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\075\uff88\001\002\000\036\021\uff99\022" +
    "\uff99\035\uff99\040\uff99\041\uff99\042\uff99\045\uff99\046\uff99" +
    "\060\uff99\061\uff99\076\uff99\077\uff99\100\uff99\102\uff99\001" +
    "\002\000\036\021\uff98\022\uff98\035\uff98\040\uff98\041\uff98" +
    "\042\uff98\045\uff98\046\uff98\060\uff98\061\uff98\076\uff98\077" +
    "\uff98\100\uff98\102\uff98\001\002\000\036\021\071\022\062" +
    "\035\124\040\100\041\065\042\060\045\125\046\067\060" +
    "\076\061\127\076\077\077\054\100\102\102\126\001\002" +
    "\000\036\021\uff97\022\uff97\035\uff97\040\uff97\041\uff97\042" +
    "\uff97\045\uff97\046\uff97\060\uff97\061\uff97\076\uff97\077\uff97" +
    "\100\uff97\102\uff97\001\002\000\036\021\uff96\022\uff96\035" +
    "\uff96\040\uff96\041\uff96\042\uff96\045\uff96\046\uff96\060\uff96" +
    "\061\uff96\076\uff96\077\uff96\100\uff96\102\uff96\001\002\000" +
    "\046\023\uff9b\024\uff9b\025\uff9b\030\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\144\057\142\001\002" +
    "\000\036\021\uff92\022\uff92\035\uff92\040\uff92\041\uff92\042" +
    "\uff92\045\uff92\046\uff92\060\uff92\061\uff92\076\uff92\077\uff92" +
    "\100\uff92\102\uff92\001\002\000\036\021\071\022\062\035" +
    "\124\040\100\041\065\042\060\045\125\046\067\060\076" +
    "\061\127\076\077\077\054\100\102\102\126\001\002\000" +
    "\036\021\uff93\022\uff93\035\uff93\040\uff93\041\uff93\042\uff93" +
    "\045\uff93\046\uff93\060\uff93\061\uff93\076\uff93\077\uff93\100" +
    "\uff93\102\uff93\001\002\000\052\023\uff95\024\uff95\025\uff95" +
    "\030\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\146\041\147\050\uff95\051\uff95\052\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\001\002\000\036\021" +
    "\uff8f\022\uff8f\035\uff8f\040\uff8f\041\uff8f\042\uff8f\045\uff8f" +
    "\046\uff8f\060\uff8f\061\uff8f\076\uff8f\077\uff8f\100\uff8f\102" +
    "\uff8f\001\002\000\036\021\uff8e\022\uff8e\035\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\045\uff8e\046\uff8e\060\uff8e\061\uff8e\076" +
    "\uff8e\077\uff8e\100\uff8e\102\uff8e\001\002\000\036\021\071" +
    "\022\062\035\124\040\100\041\065\042\060\045\125\046" +
    "\067\060\076\061\127\076\077\077\054\100\102\102\126" +
    "\001\002\000\060\023\uff91\024\uff91\025\uff91\030\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\153\043\155\044\152\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\001\002" +
    "\000\036\021\uff89\022\uff89\035\uff89\040\uff89\041\uff89\042" +
    "\uff89\045\uff89\046\uff89\060\uff89\061\uff89\076\uff89\077\uff89" +
    "\100\uff89\102\uff89\001\002\000\036\021\uff8b\022\uff8b\035" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\045\uff8b\046\uff8b\060\uff8b" +
    "\061\uff8b\076\uff8b\077\uff8b\100\uff8b\102\uff8b\001\002\000" +
    "\036\021\071\022\062\035\124\040\100\041\065\042\060" +
    "\045\125\046\067\060\076\061\127\076\077\077\054\100" +
    "\102\102\126\001\002\000\036\021\uff8a\022\uff8a\035\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\045\uff8a\046\uff8a\060\uff8a\061" +
    "\uff8a\076\uff8a\077\uff8a\100\uff8a\102\uff8a\001\002\000\060" +
    "\023\uff8d\024\uff8d\025\uff8d\030\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\056\uff8d\057\uff8d\001\002\000\106\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\030\uff82\032\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054" +
    "\uff82\055\uff82\056\uff82\057\uff82\064\uff82\065\uff82\066\uff82" +
    "\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075" +
    "\uff82\001\002\000\036\021\071\022\062\035\124\040\100" +
    "\041\065\042\060\045\125\046\067\060\076\061\127\076" +
    "\077\077\054\100\102\102\126\001\002\000\006\023\163" +
    "\025\162\001\002\000\036\021\071\022\062\035\124\040" +
    "\100\041\065\042\060\045\125\046\067\060\076\061\127" +
    "\076\077\077\054\100\102\102\126\001\002\000\122\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\030\uff6b\031\uff6b" +
    "\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\047\uff6b\050\uff6b" +
    "\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057" +
    "\uff6b\060\uff6b\061\uff6b\062\uff6b\064\uff6b\065\uff6b\066\uff6b" +
    "\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b\075" +
    "\uff6b\001\002\000\012\023\uffb9\024\uffb9\025\uffb9\032\uffb9" +
    "\001\002\000\036\021\071\022\062\035\124\040\100\041" +
    "\065\042\060\045\125\046\067\060\076\061\127\076\077" +
    "\077\054\100\102\102\126\001\002\000\006\023\167\025" +
    "\162\001\002\000\056\012\101\014\120\015\064\016\061" +
    "\017\111\020\106\021\071\022\062\024\070\027\040\035" +
    "\124\040\100\041\065\042\060\045\125\046\067\060\076" +
    "\061\127\076\077\077\054\100\102\102\126\001\002\000" +
    "\062\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\024\uffc1\027\uffc1\030\uffc1\035" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\046\uffc1\060\uffc1" +
    "\061\uffc1\076\uffc1\077\uffc1\100\uffc1\102\uffc1\001\002\000" +
    "\036\021\071\022\062\035\124\040\100\041\065\042\060" +
    "\045\125\046\067\060\076\061\127\076\077\077\054\100" +
    "\102\102\126\001\002\000\024\023\uffa5\024\uffa5\025\uffa5" +
    "\030\uffa5\032\uffa5\033\uffa5\034\173\050\uffa5\051\uffa5\001" +
    "\002\000\036\021\071\022\062\035\124\040\100\041\065" +
    "\042\060\045\125\046\067\060\076\061\127\076\077\077" +
    "\054\100\102\102\126\001\002\000\026\023\uffa3\024\uffa3" +
    "\025\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\035\175\050" +
    "\uffa3\051\uffa3\001\002\000\036\021\071\022\062\035\124" +
    "\040\100\041\065\042\060\045\125\046\067\060\076\061" +
    "\127\076\077\077\054\100\102\102\126\001\002\000\032" +
    "\023\uffa1\024\uffa1\025\uffa1\030\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\050\uffa1\051\uffa1\052\177\053\201\001\002" +
    "\000\036\021\uff9d\022\uff9d\035\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\045\uff9d\046\uff9d\060\uff9d\061\uff9d\076\uff9d\077\uff9d" +
    "\100\uff9d\102\uff9d\001\002\000\036\021\071\022\062\035" +
    "\124\040\100\041\065\042\060\045\125\046\067\060\076" +
    "\061\127\076\077\077\054\100\102\102\126\001\002\000" +
    "\036\021\uff9c\022\uff9c\035\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\045\uff9c\046\uff9c\060\uff9c\061\uff9c\076\uff9c\077\uff9c\100" +
    "\uff9c\102\uff9c\001\002\000\042\023\uff9f\024\uff9f\025\uff9f" +
    "\030\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\134\037" +
    "\135\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\137\055\140" +
    "\001\002\000\036\021\071\022\062\035\124\040\100\041" +
    "\065\042\060\045\125\046\067\060\076\061\127\076\077" +
    "\077\054\100\102\102\126\001\002\000\022\023\uffa7\024" +
    "\uffa7\025\uffa7\030\uffa7\032\uffa7\033\171\050\uffa7\051\uffa7" +
    "\001\002\000\122\022\uff73\023\uff73\024\uff73\025\uff73\026" +
    "\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044" +
    "\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73" +
    "\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73\064" +
    "\uff73\065\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73" +
    "\073\uff73\074\uff73\075\uff73\001\002\000\036\021\071\022" +
    "\062\035\124\040\100\041\065\042\060\045\125\046\067" +
    "\060\076\061\127\076\077\077\054\100\102\102\126\001" +
    "\002\000\122\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036" +
    "\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72" +
    "\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055" +
    "\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\064\uff72" +
    "\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073" +
    "\uff72\074\uff72\075\uff72\001\002\000\004\100\222\001\002" +
    "\000\040\021\071\022\062\023\214\035\124\040\100\041" +
    "\065\042\060\045\125\046\067\060\076\061\127\076\077" +
    "\077\054\100\102\102\126\001\002\000\004\100\213\001" +
    "\002\000\122\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75" +
    "\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036" +
    "\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75" +
    "\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055" +
    "\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\064\uff75" +
    "\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073" +
    "\uff75\074\uff75\075\uff75\001\002\000\122\022\uff76\023\uff76" +
    "\024\uff76\025\uff76\026\uff76\030\uff76\031\uff76\032\uff76\033" +
    "\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76" +
    "\042\uff76\043\uff76\044\uff76\047\uff76\050\uff76\051\uff76\052" +
    "\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76" +
    "\061\uff76\062\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070" +
    "\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075\uff76\001\002" +
    "\000\006\023\uff6f\025\uff6f\001\002\000\006\023\220\025" +
    "\217\001\002\000\036\021\071\022\062\035\124\040\100" +
    "\041\065\042\060\045\125\046\067\060\076\061\127\076" +
    "\077\077\054\100\102\102\126\001\002\000\122\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\026\uff77\030\uff77\031\uff77\032" +
    "\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77" +
    "\041\uff77\042\uff77\043\uff77\044\uff77\047\uff77\050\uff77\051" +
    "\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77" +
    "\060\uff77\061\uff77\062\uff77\064\uff77\065\uff77\066\uff77\067" +
    "\uff77\070\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77" +
    "\001\002\000\006\023\uff70\025\uff70\001\002\000\122\022" +
    "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040" +
    "\uff74\041\uff74\042\uff74\043\uff74\044\uff74\047\uff74\050\uff74" +
    "\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057" +
    "\uff74\060\uff74\061\uff74\062\uff74\064\uff74\065\uff74\066\uff74" +
    "\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\074\uff74\075" +
    "\uff74\001\002\000\006\025\162\032\224\001\002\000\122" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78\030\uff78\031" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\047\uff78\050" +
    "\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78" +
    "\057\uff78\060\uff78\061\uff78\062\uff78\064\uff78\065\uff78\066" +
    "\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78" +
    "\075\uff78\001\002\000\062\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd" +
    "\027\uffbd\030\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\045" +
    "\uffbd\046\uffbd\060\uffbd\061\uffbd\076\uffbd\077\uffbd\100\uffbd" +
    "\102\uffbd\001\002\000\064\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\027\uffbb\030\uffbb\035\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\045\uffbb\046\uffbb\060\uffbb\061\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\102\uffbb\001\002\000\006\024\231\025\162\001" +
    "\002\000\062\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\027\uffbc\030" +
    "\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc" +
    "\060\uffbc\061\uffbc\076\uffbc\077\uffbc\100\uffbc\102\uffbc\001" +
    "\002\000\064\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\027" +
    "\uffba\030\uffba\035\uffba\040\uffba\041\uffba\042\uffba\045\uffba" +
    "\046\uffba\060\uffba\061\uffba\076\uffba\077\uffba\100\uffba\102" +
    "\uffba\001\002\000\036\021\uffaf\022\uffaf\035\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\045\uffaf\046\uffaf\060\uffaf\061\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\102\uffaf\001\002\000\036\021\uffb4" +
    "\022\uffb4\035\uffb4\040\uffb4\041\uffb4\042\uffb4\045\uffb4\046" +
    "\uffb4\060\uffb4\061\uffb4\076\uffb4\077\uffb4\100\uffb4\102\uffb4" +
    "\001\002\000\036\021\uffab\022\uffab\035\uffab\040\uffab\041" +
    "\uffab\042\uffab\045\uffab\046\uffab\060\uffab\061\uffab\076\uffab" +
    "\077\uffab\100\uffab\102\uffab\001\002\000\036\021\uffac\022" +
    "\uffac\035\uffac\040\uffac\041\uffac\042\uffac\045\uffac\046\uffac" +
    "\060\uffac\061\uffac\076\uffac\077\uffac\100\uffac\102\uffac\001" +
    "\002\000\036\021\uffae\022\uffae\035\uffae\040\uffae\041\uffae" +
    "\042\uffae\045\uffae\046\uffae\060\uffae\061\uffae\076\uffae\077" +
    "\uffae\100\uffae\102\uffae\001\002\000\036\021\uffb3\022\uffb3" +
    "\035\uffb3\040\uffb3\041\uffb3\042\uffb3\045\uffb3\046\uffb3\060" +
    "\uffb3\061\uffb3\076\uffb3\077\uffb3\100\uffb3\102\uffb3\001\002" +
    "\000\036\021\uffb0\022\uffb0\035\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\045\uffb0\046\uffb0\060\uffb0\061\uffb0\076\uffb0\077\uffb0" +
    "\100\uffb0\102\uffb0\001\002\000\036\021\071\022\062\035" +
    "\124\040\100\041\065\042\060\045\125\046\067\060\076" +
    "\061\127\076\077\077\054\100\102\102\126\001\002\000" +
    "\036\021\uffb5\022\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\045\uffb5\046\uffb5\060\uffb5\061\uffb5\076\uffb5\077\uffb5\100" +
    "\uffb5\102\uffb5\001\002\000\036\021\uffb2\022\uffb2\035\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\045\uffb2\046\uffb2\060\uffb2\061" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\102\uffb2\001\002\000\036" +
    "\021\uffb1\022\uffb1\035\uffb1\040\uffb1\041\uffb1\042\uffb1\045" +
    "\uffb1\046\uffb1\060\uffb1\061\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\102\uffb1\001\002\000\036\021\uffad\022\uffad\035\uffad\040" +
    "\uffad\041\uffad\042\uffad\045\uffad\046\uffad\060\uffad\061\uffad" +
    "\076\uffad\077\uffad\100\uffad\102\uffad\001\002\000\014\023" +
    "\uffb6\024\uffb6\025\uffb6\030\uffb6\032\uffb6\001\002\000\062" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\027\uffcb\030\uffcb\035\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\045\uffcb\046\uffcb\060\uffcb\061" +
    "\uffcb\076\uffcb\077\uffcb\100\uffcb\102\uffcb\001\002\000\036" +
    "\021\071\022\062\035\124\040\100\041\065\042\060\045" +
    "\125\046\067\060\076\061\127\076\077\077\054\100\102" +
    "\102\126\001\002\000\006\023\252\025\162\001\002\000" +
    "\056\012\101\014\120\015\064\016\061\017\111\020\106" +
    "\021\071\022\062\024\070\027\040\035\124\040\100\041" +
    "\065\042\060\045\125\046\067\060\076\061\127\076\077" +
    "\077\054\100\102\102\126\001\002\000\062\012\uffc3\013" +
    "\254\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\024\uffc3\027\uffc3\030\uffc3\035\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\045\uffc3\046\uffc3\060\uffc3\061\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\102\uffc3\001\002\000\056\012\101\014" +
    "\120\015\064\016\061\017\111\020\106\021\071\022\062" +
    "\024\070\027\040\035\124\040\100\041\065\042\060\045" +
    "\125\046\067\060\076\061\127\076\077\077\054\100\102" +
    "\102\126\001\002\000\062\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2" +
    "\027\uffc2\030\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\045" +
    "\uffc2\046\uffc2\060\uffc2\061\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\102\uffc2\001\002\000\106\023\uff83\024\uff83\025\uff83\026" +
    "\uff83\030\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\050" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\057\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071" +
    "\uff83\072\uff83\073\uff83\074\uff83\075\uff83\001\002\000\036" +
    "\021\071\022\062\035\124\040\100\041\065\042\060\045" +
    "\125\046\067\060\076\061\127\076\077\077\054\100\102" +
    "\102\126\001\002\000\020\023\uffa9\024\uffa9\025\uffa9\030" +
    "\uffa9\032\uffa9\050\uffa9\051\203\001\002\000\106\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\030\uff80\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\056\uff80\057\uff80\064\uff80\065\uff80\066\uff80" +
    "\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075" +
    "\uff80\001\002\000\052\005\012\006\020\007\004\010\011" +
    "\011\010\021\071\022\062\035\124\040\100\041\065\042" +
    "\060\045\125\046\067\060\076\061\127\076\077\077\054" +
    "\100\102\101\017\102\126\001\002\000\006\023\uff85\042" +
    "\uff85\001\002\000\006\023\265\042\266\001\002\000\106" +
    "\023\uff7f\024\uff7f\025\uff7f\026\uff7f\030\uff7f\032\uff7f\033" +
    "\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\050\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\064\uff7f\065\uff7f" +
    "\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074" +
    "\uff7f\075\uff7f\001\002\000\006\023\uff86\042\uff86\001\002" +
    "\000\040\021\071\022\062\024\226\035\124\040\100\041" +
    "\065\042\060\045\125\046\067\060\076\061\127\076\077" +
    "\077\054\100\102\102\126\001\002\000\040\021\071\022" +
    "\062\024\226\035\124\040\100\041\065\042\060\045\125" +
    "\046\067\060\076\061\127\076\077\077\054\100\102\102" +
    "\126\001\002\000\040\021\071\022\062\023\272\035\124" +
    "\040\100\041\065\042\060\045\125\046\067\060\076\061" +
    "\127\076\077\077\054\100\102\102\126\001\002\000\056" +
    "\012\101\014\120\015\064\016\061\017\111\020\106\021" +
    "\071\022\062\024\070\027\040\035\124\040\100\041\065" +
    "\042\060\045\125\046\067\060\076\061\127\076\077\077" +
    "\054\100\102\102\126\001\002\000\006\023\274\025\162" +
    "\001\002\000\056\012\101\014\120\015\064\016\061\017" +
    "\111\020\106\021\071\022\062\024\070\027\040\035\124" +
    "\040\100\041\065\042\060\045\125\046\067\060\076\061" +
    "\127\076\077\077\054\100\102\102\126\001\002\000\062" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\024\uffc0\027\uffc0\030\uffc0\035\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\060\uffc0\061" +
    "\uffc0\076\uffc0\077\uffc0\100\uffc0\102\uffc0\001\002\000\062" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\024\uffbf\027\uffbf\030\uffbf\035\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\045\uffbf\046\uffbf\060\uffbf\061" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\102\uffbf\001\002\000\006" +
    "\023\300\042\266\001\002\000\036\021\071\022\062\035" +
    "\124\040\100\041\065\042\060\045\125\046\067\060\076" +
    "\061\127\076\077\077\054\100\102\102\126\001\002\000" +
    "\106\023\uff87\024\uff87\025\uff87\026\uff87\030\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\043\uff87\044\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87" +
    "\074\uff87\075\uff87\001\002\000\062\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\024\uffbe\027\uffbe\030\uffbe\035\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\045\uffbe\046\uffbe\060\uffbe\061\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\102\uffbe\001\002\000\022\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\101\ufff7\001\002" +
    "\000\006\023\uffd9\025\uffd9\001\002\000\020\005\012\006" +
    "\020\007\004\010\011\011\010\063\313\101\017\001\002" +
    "\000\006\023\ufff5\025\307\001\002\000\020\005\012\006" +
    "\020\007\004\010\011\011\010\063\311\101\017\001\002" +
    "\000\006\023\ufff1\025\ufff1\001\002\000\004\023\ufff6\001" +
    "\002\000\006\023\ufff2\025\ufff2\001\002\000\004\023\ufff4" +
    "\001\002\000\006\032\uffaa\050\257\001\002\000\004\032" +
    "\316\001\002\000\014\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\031\uffd4\001\002\000\036\021\071\022\062\035\124\040" +
    "\100\041\065\042\060\045\125\046\067\060\076\061\127" +
    "\076\077\077\054\100\102\102\126\001\002\000\004\032" +
    "\321\001\002\000\014\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\031\uffd3\001\002\000\006\042\024\100\021\001\002\000" +
    "\100\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\024\ufffa\027\ufffa\030\ufffa\035\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\060\ufffa\061" +
    "\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\001\002" +
    "\000\006\024\uffee\025\uffee\001\002\000\016\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2\001\002\000\040" +
    "\021\071\022\062\027\330\035\124\040\100\041\065\042" +
    "\060\045\125\046\067\060\076\061\127\076\077\077\054" +
    "\100\102\102\126\001\002\000\010\024\uffea\025\uffea\030" +
    "\uffea\001\002\000\040\021\071\022\062\027\330\035\124" +
    "\040\100\041\065\042\060\045\125\046\067\060\076\061" +
    "\127\076\077\077\054\100\102\102\126\001\002\000\006" +
    "\024\uffec\025\uffec\001\002\000\006\025\334\030\335\001" +
    "\002\000\006\025\uffe8\030\uffe8\001\002\000\040\021\071" +
    "\022\062\027\330\035\124\040\100\041\065\042\060\045" +
    "\125\046\067\060\076\061\127\076\077\077\054\100\102" +
    "\102\126\001\002\000\010\024\uffe9\025\uffe9\030\uffe9\001" +
    "\002\000\006\025\uffe7\030\uffe7\001\002\000\016\005\012" +
    "\006\020\007\004\010\011\011\010\101\017\001\002\000" +
    "\006\042\024\100\021\001\002\000\006\024\uffef\025\uffef" +
    "\001\002\000\006\024\344\025\343\001\002\000\006\042" +
    "\024\100\021\001\002\000\100\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024\ufffb" +
    "\027\ufffb\030\ufffb\035\ufffb\040\ufffb\041\ufffb\042\ufffb\045" +
    "\ufffb\046\ufffb\060\ufffb\061\ufffb\076\ufffb\077\ufffb\100\ufffb" +
    "\101\ufffb\102\ufffb\001\002\000\006\024\ufff0\025\ufff0\001" +
    "\002\000\004\002\001\001\002\000\022\002\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\101\uffff\001" +
    "\002\000\014\023\uffde\024\uffde\027\uffe2\042\uffde\100\uffde" +
    "\001\002\000\016\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\101\uffe0\001\002\000\016\005\012\006\020\007\004" +
    "\010\011\011\010\101\017\001\002\000\006\042\024\100" +
    "\021\001\002\000\020\005\012\006\020\007\004\010\011" +
    "\011\010\030\356\101\017\001\002\000\006\042\024\100" +
    "\021\001\002\000\012\023\uffdf\024\uffdf\042\uffdf\100\uffdf" +
    "\001\002\000\006\024\360\025\343\001\002\000\020\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\030\uffdc\101\uffdc" +
    "\001\002\000\006\024\362\025\343\001\002\000\020\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\030\uffdd\101\uffdd" +
    "\001\002\000\004\027\364\001\002\000\016\005\012\006" +
    "\020\007\004\010\011\011\010\101\017\001\002\000\020" +
    "\005\012\006\020\007\004\010\011\011\010\030\366\101" +
    "\017\001\002\000\012\023\uffe1\024\uffe1\042\uffe1\100\uffe1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\016\015\006\027\005\051\013\052\012\062" +
    "\004\065\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\006\027\005" +
    "\051\346\062\004\065\015\001\001\000\002\001\001\000" +
    "\004\070\336\001\001\000\012\017\021\031\024\032\025" +
    "\046\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\027\001\001\000\002\001\001\000\044\002\054" +
    "\004\114\010\074\012\106\013\314\021\072\023\073\030" +
    "\115\037\112\040\313\041\121\047\111\050\065\053\127" +
    "\056\113\066\132\067\130\001\001\000\012\043\035\044" +
    "\032\062\004\065\033\001\001\000\004\045\305\001\001" +
    "\000\006\017\303\046\046\001\001\000\004\011\302\001" +
    "\001\000\002\001\001\000\004\011\040\001\001\000\004" +
    "\073\041\001\001\000\002\001\001\000\004\016\042\001" +
    "\001\000\012\015\043\061\044\062\004\065\045\001\001" +
    "\000\002\001\001\000\062\002\054\004\114\006\116\010" +
    "\074\011\062\012\106\021\072\023\073\024\102\025\122" +
    "\030\115\035\055\036\056\037\112\040\071\041\121\047" +
    "\111\050\065\053\127\055\107\056\113\060\103\066\104" +
    "\067\130\001\001\000\012\017\021\031\024\032\025\046" +
    "\046\001\001\000\004\014\027\001\001\000\012\043\051" +
    "\044\032\062\004\065\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\002\054\004\114" +
    "\006\116\010\074\012\106\021\072\023\073\024\160\030" +
    "\115\037\112\040\071\041\121\047\111\050\065\053\127" +
    "\056\113\062\004\064\276\065\262\066\104\067\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\106\047\111\050\065\066\260\067\130\001\001" +
    "\000\002\001\001\000\004\022\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\106\047\111\050\065" +
    "\066\255\067\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\240\001\001\000\050\002" +
    "\054\004\114\006\116\010\074\012\106\021\072\023\073" +
    "\024\226\026\227\030\115\037\112\040\071\041\121\047" +
    "\111\050\065\053\127\056\113\066\104\067\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\106\047\111\050\065\066\156" +
    "\067\130\001\001\000\004\054\135\001\001\000\016\010" +
    "\131\012\106\047\111\050\065\066\132\067\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\054\010\074\012\106\041\121" +
    "\047\111\050\065\056\140\066\132\067\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\142\001\001" +
    "\000\002\001\001\000\022\002\144\010\074\012\106\041" +
    "\121\047\111\050\065\066\132\067\130\001\001\000\002" +
    "\001\001\000\004\003\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\074\012\106\041\150\047\111" +
    "\050\065\066\132\067\130\001\001\000\004\042\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\155" +
    "\012\106\047\111\050\065\066\132\067\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\002\054\004\114\006\116\010\074\012\106\021\072\023" +
    "\073\024\160\030\115\037\112\040\071\041\121\047\111" +
    "\050\065\053\127\056\113\066\104\067\130\001\001\000" +
    "\002\001\001\000\044\002\054\004\114\006\163\010\074" +
    "\012\106\021\072\023\073\030\115\037\112\040\071\041" +
    "\121\047\111\050\065\053\127\056\113\066\104\067\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\002" +
    "\054\004\114\006\116\010\074\012\106\021\072\023\073" +
    "\024\165\030\115\037\112\040\071\041\121\047\111\050" +
    "\065\053\127\056\113\066\104\067\130\001\001\000\002" +
    "\001\001\000\062\002\054\004\114\006\116\010\074\011" +
    "\062\012\106\021\072\023\073\024\102\025\122\030\115" +
    "\035\055\036\056\037\112\040\071\041\121\047\111\050" +
    "\065\053\127\055\107\056\113\060\167\066\104\067\130" +
    "\001\001\000\002\001\001\000\034\002\054\004\114\010" +
    "\074\012\106\021\072\023\171\041\121\047\111\050\065" +
    "\053\127\056\113\066\132\067\130\001\001\000\002\001" +
    "\001\000\032\002\054\004\173\010\074\012\106\021\072" +
    "\041\121\047\111\050\065\053\127\056\113\066\132\067" +
    "\130\001\001\000\002\001\001\000\030\002\054\010\074" +
    "\012\106\021\175\041\121\047\111\050\065\053\127\056" +
    "\113\066\132\067\130\001\001\000\004\022\177\001\001" +
    "\000\002\001\001\000\026\002\054\010\074\012\106\041" +
    "\121\047\111\050\065\053\201\056\113\066\132\067\130" +
    "\001\001\000\002\001\001\000\004\054\135\001\001\000" +
    "\036\002\054\004\114\010\074\012\106\021\072\023\073" +
    "\030\203\041\121\047\111\050\065\053\127\056\113\066" +
    "\132\067\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\002\054\004\114\006\116\010\074\012\106\021" +
    "\072\023\073\024\222\030\115\037\112\040\071\041\121" +
    "\047\111\050\065\053\127\056\113\066\104\067\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\054" +
    "\004\114\005\215\006\214\010\074\012\106\021\072\023" +
    "\073\030\115\037\112\040\071\041\121\047\111\050\065" +
    "\053\127\056\113\066\104\067\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\054\004\114\006\220\010" +
    "\074\012\106\021\072\023\073\030\115\037\112\040\071" +
    "\041\121\047\111\050\065\053\127\056\113\066\104\067" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\002\054\004\114\006" +
    "\245\010\074\012\106\021\072\023\073\030\115\037\112" +
    "\040\071\041\121\047\111\050\065\053\127\056\113\066" +
    "\104\067\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\002\054\004\114\006\116\010\074" +
    "\012\106\021\072\023\073\024\250\030\115\037\112\040" +
    "\071\041\121\047\111\050\065\053\127\056\113\066\104" +
    "\067\130\001\001\000\002\001\001\000\062\002\054\004" +
    "\114\006\116\010\074\011\062\012\106\021\072\023\073" +
    "\024\102\025\122\030\115\035\055\036\056\037\112\040" +
    "\071\041\121\047\111\050\065\053\127\055\107\056\113" +
    "\060\252\066\104\067\130\001\001\000\002\001\001\000" +
    "\062\002\054\004\114\006\116\010\074\011\062\012\106" +
    "\021\072\023\073\024\102\025\122\030\115\035\055\036" +
    "\056\037\112\040\071\041\121\047\111\050\065\053\127" +
    "\055\107\056\113\060\254\066\104\067\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\054\004\114" +
    "\010\074\012\106\021\072\023\073\030\115\037\257\041" +
    "\121\047\111\050\065\053\127\056\113\066\132\067\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\002" +
    "\054\004\114\006\116\010\074\012\106\021\072\023\073" +
    "\024\160\030\115\037\112\040\071\041\121\047\111\050" +
    "\065\053\127\056\113\062\004\064\263\065\262\066\104" +
    "\067\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\054\004\114" +
    "\006\116\010\074\012\106\021\072\023\073\024\226\026" +
    "\267\030\115\037\112\040\071\041\121\047\111\050\065" +
    "\053\127\056\113\066\104\067\130\001\001\000\050\002" +
    "\054\004\114\006\116\010\074\012\106\021\072\023\073" +
    "\024\226\026\270\030\115\037\112\040\071\041\121\047" +
    "\111\050\065\053\127\056\113\066\104\067\130\001\001" +
    "\000\046\002\054\004\114\006\116\010\074\012\106\021" +
    "\072\023\073\024\272\030\115\037\112\040\071\041\121" +
    "\047\111\050\065\053\127\056\113\066\104\067\130\001" +
    "\001\000\062\002\054\004\114\006\116\010\074\011\062" +
    "\012\106\021\072\023\073\024\102\025\122\030\115\035" +
    "\055\036\056\037\112\040\071\041\121\047\111\050\065" +
    "\053\127\055\107\056\113\060\275\066\104\067\130\001" +
    "\001\000\002\001\001\000\062\002\054\004\114\006\116" +
    "\010\074\011\062\012\106\021\072\023\073\024\102\025" +
    "\122\030\115\035\055\036\056\037\112\040\071\041\121" +
    "\047\111\050\065\053\127\055\107\056\113\060\274\066" +
    "\104\067\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\300\012\106\047\111\050" +
    "\065\066\132\067\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\311\062\004\065\033\001\001\000\002\001\001\000\010" +
    "\044\307\062\004\065\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\002" +
    "\054\004\114\010\074\012\106\013\317\021\072\023\073" +
    "\030\115\037\112\040\313\041\121\047\111\050\065\053" +
    "\127\056\113\066\132\067\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\021\031\323\046\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\002\054\004\114\006\326\010\074\012\106\021" +
    "\072\023\073\030\115\033\330\037\112\040\071\041\121" +
    "\047\111\050\065\053\127\056\113\066\104\067\130\001" +
    "\001\000\002\001\001\000\050\002\054\004\114\006\326" +
    "\010\074\012\106\021\072\023\073\030\115\033\332\034" +
    "\331\037\112\040\071\041\121\047\111\050\065\053\127" +
    "\056\113\066\104\067\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\002\054\004\114" +
    "\006\326\010\074\012\106\021\072\023\073\030\115\033" +
    "\335\037\112\040\071\041\121\047\111\050\065\053\127" +
    "\056\113\066\104\067\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\062\004\065\337\001\001\000\010" +
    "\017\340\020\341\046\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\344\046\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\362\001\001\000\004\072\351\001\001" +
    "\000\010\062\004\063\353\065\352\001\001\000\010\017" +
    "\340\020\360\046\046\001\001\000\006\062\004\065\354" +
    "\001\001\000\010\017\340\020\356\046\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\062" +
    "\004\063\364\065\352\001\001\000\006\062\004\065\354" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("\tParsing error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

      if (s.left >= 0) {
        m.append(" in line " + (s.left +1 ));
        if (s.right >= 0) {
          m.append(", column " + (s.right + 1));
        }
      }
    }
    m.append(" : " + message);
    System.err.println(m);
  }
	public void report_fatal_error(String message, Object info) {
		fatalError = true;
		report_error(message, info);
		System.exit(1);
	}

	public boolean error = false;
	public boolean fatalError = false;

	public Parser(InputStream inp) {
		this(new Yylex(inp));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  static cnx.symbol.Symbol symbol(String s) {
    return cnx.symbol.Symbol.symbol(s);
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // constant ::= CHR 
            {
              Constant RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char i = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new CharLiteral(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // constant ::= NUM 
            {
              Constant RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new IntLiteral(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // primary_expression ::= LPAREN expression RPAREN 
            {
              Primary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // primary_expression ::= STR 
            {
              Primary_expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new StringLiteral(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primary_expression ::= constant 
            {
              Primary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant x = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // primary_expression ::= ID 
            {
              Primary_expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Id(symbol(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arguments ::= assignment_expression 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment_expression x = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Arguments(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arguments ::= arguments COMMA assignment_expression 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arguments x = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment_expression y = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // postfix_expression ::= primary_expression 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Primary_expression x = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // postfix_expression ::= postfix_expression DEC 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Dec_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // postfix_expression ::= postfix_expression INC 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Inc_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // postfix_expression ::= postfix_expression PTR ID 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Pointer_expression(x,symbol(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // postfix_expression ::= postfix_expression DOT ID 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Dot_expression(x,symbol(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // postfix_expression ::= postfix_expression LPAREN RPAREN 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new Function_expression(x,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // postfix_expression ::= postfix_expression LPAREN arguments RPAREN 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arguments y = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Function_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // postfix_expression ::= postfix_expression LBRACK expression RBRACK 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Array_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unary_operator ::= NOT 
            {
              Unary_operator RESULT =null;
		RESULT=Unary_operator.NOT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unary_operator ::= BITNOT 
            {
              Unary_operator RESULT =null;
		RESULT=Unary_operator.BITNOT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unary_operator ::= MINUS 
            {
              Unary_operator RESULT =null;
		RESULT=Unary_operator.MINUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unary_operator ::= PLUS 
            {
              Unary_operator RESULT =null;
		RESULT=Unary_operator.PLUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unary_operator ::= ASTER 
            {
              Unary_operator RESULT =null;
		RESULT=Unary_operator.ASTER;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unary_operator ::= BITAND 
            {
              Unary_operator RESULT =null;
		RESULT=Unary_operator.BITAND;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Unary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type_name x = (Type_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Type_size(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unary_expression ::= SIZEOF unary_expression 
            {
              Unary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Unary_expression x = (Unary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Unary_expressions(Unary_expressions_operator.SIZEOF,x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unary_expression ::= unary_operator cast_expression 
            {
              Unary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Unary_operator x = (Unary_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cast_expression y = (Cast_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Unary_cast_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unary_expression ::= DEC unary_expression 
            {
              Unary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Unary_expression x = (Unary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Unary_expressions(Unary_expressions_operator.DEC,x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unary_expression ::= INC unary_expression 
            {
              Unary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Unary_expression x = (Unary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Unary_expressions(Unary_expressions_operator.INC,x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unary_expression ::= postfix_expression 
            {
              Unary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type_name ::= type_specifier 
            {
              Type_name RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Type_name(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // type_name ::= type_name ASTER 
            {
              Type_name RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type_name x = (Type_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Type_name(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              Cast_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type_name x = (Type_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cast_expression y = (Cast_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Cast_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cast_expression ::= unary_expression 
            {
              Cast_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Unary_expression x = (Unary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Cast_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multiplicative_operator ::= MOD 
            {
              Multiplicative_operator RESULT =null;
		RESULT=Multiplicative_operator.MOD;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // multiplicative_operator ::= DIVIDE 
            {
              Multiplicative_operator RESULT =null;
		RESULT=Multiplicative_operator.DIVIDE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // multiplicative_operator ::= ASTER 
            {
              Multiplicative_operator RESULT =null;
		RESULT=Multiplicative_operator.MULTIPLY;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // multiplicative_expression ::= cast_expression 
            {
              Multiplicative_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cast_expression x = (Cast_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Multiplicative_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              Multiplicative_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Multiplicative_expression x = (Multiplicative_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Multiplicative_operator y = (Multiplicative_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cast_expression z = (Cast_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Multiplicative_expression(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // additive_operator ::= MINUS 
            {
              Additive_operator RESULT =null;
		RESULT=Additive_operator.MINUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // additive_operator ::= PLUS 
            {
              Additive_operator RESULT =null;
		RESULT=Additive_operator.PLUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // additive_expression ::= multiplicative_expression 
            {
              Additive_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Multiplicative_expression x = (Multiplicative_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Additive_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              Additive_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Additive_expression x = (Additive_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Additive_operator y = (Additive_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Multiplicative_expression z = (Multiplicative_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Additive_expression(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // shift_operator ::= SHR 
            {
              Shift_operator RESULT =null;
		RESULT=Shift_operator.SHR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // shift_operator ::= SHL 
            {
              Shift_operator RESULT =null;
		RESULT=Shift_operator.SHL;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // shift_expression ::= additive_expression 
            {
              Shift_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Additive_expression x = (Additive_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Shift_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              Shift_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Shift_expression x = (Shift_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Shift_operator y = (Shift_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Additive_expression z = (Additive_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Shift_expression(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relational_operator ::= GE 
            {
              Relational_operator RESULT =null;
		RESULT=Relational_operator.GE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relational_operator ::= LE 
            {
              Relational_operator RESULT =null;
		RESULT=Relational_operator.LE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relational_operator ::= GT 
            {
              Relational_operator RESULT =null;
		RESULT=Relational_operator.GT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relational_operator ::= LT 
            {
              Relational_operator RESULT =null;
		RESULT=Relational_operator.LT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relational_expression ::= shift_expression 
            {
              Relational_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Shift_expression x = (Shift_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Relational_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              Relational_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Relational_expression x = (Relational_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Relational_operator y = (Relational_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Shift_expression z = (Shift_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Relational_expression(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // equality_operator ::= NE 
            {
              Equality_operator RESULT =null;
		RESULT=Equality_operator.NE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // equality_operator ::= EQ 
            {
              Equality_operator RESULT =null;
		RESULT=Equality_operator.EQ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // equality_expression ::= relational_expression 
            {
              Equality_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Relational_expression x = (Relational_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Equality_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              Equality_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Equality_expression x = (Equality_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Equality_operator y = (Equality_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Relational_expression z = (Relational_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Equality_expression(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // and_expression ::= equality_expression 
            {
              And_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Equality_expression x = (Equality_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new And_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // and_expression ::= and_expression BITAND equality_expression 
            {
              And_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		And_expression x = (And_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Equality_expression y = (Equality_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new And_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exclusive_or_expression ::= and_expression 
            {
              Exclusive_or_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		And_expression x = (And_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Exclusive_or_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exclusive_or_expression ::= exclusive_or_expression INDEX and_expression 
            {
              Exclusive_or_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exclusive_or_expression x = (Exclusive_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		And_expression y = (And_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Exclusive_or_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Inclusive_or_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exclusive_or_expression x = (Exclusive_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Inclusive_or_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // inclusive_or_expression ::= inclusive_or_expression BITOR exclusive_or_expression 
            {
              Inclusive_or_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Inclusive_or_expression x = (Inclusive_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exclusive_or_expression y = (Exclusive_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Inclusive_or_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // logical_and_expression ::= inclusive_or_expression 
            {
              Logical_and_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inclusive_or_expression x = (Inclusive_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Logical_and_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // logical_and_expression ::= logical_and_expression AND inclusive_or_expression 
            {
              Logical_and_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Logical_and_expression x = (Logical_and_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inclusive_or_expression y = (Inclusive_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Logical_and_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logical_or_expression ::= logical_and_expression 
            {
              Logical_or_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Logical_and_expression x = (Logical_and_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Logical_or_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              Logical_or_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Logical_or_expression x = (Logical_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Logical_and_expression y = (Logical_and_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Logical_or_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // constant_expression ::= logical_or_expression 
            {
              Constant_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Logical_or_expression x = (Logical_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignment_operator ::= ORASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.ORASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment_operator ::= XORASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.XORASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_operator ::= ANDASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.ANDASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_operator ::= SHRASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.SHRASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_operator ::= SHLASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.SHLASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_operator ::= SUBASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.SUBASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_operator ::= ADDASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.ADDASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_operator ::= MODASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.MODASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_operator ::= DIVASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.DIVASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_operator ::= MULASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.MULASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_operator ::= ASSIGN 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.ASSIGN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Assignment_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Unary_expression x = (Unary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assignment_operator y = (Assignment_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment_expression z = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Assignment_expression(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_expression ::= logical_or_expression 
            {
              Assignment_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Logical_or_expression x = (Logical_or_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Assignment_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= assignment_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment_expression x = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression COMMA assignment_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment_expression y = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fors ::= expression SEMICOLON 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fors",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fors ::= SEMICOLON 
            {
              Expression RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fors",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // jump_statement ::= RETURN fors 
            {
              Jump_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Return_statement(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // jump_statement ::= BREAK SEMICOLON 
            {
              Jump_statement RESULT =null;
		RESULT=new Break_statement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // jump_statement ::= CONTINUE SEMICOLON 
            {
              Jump_statement RESULT =null;
		RESULT=new Continue_statement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // iteration_statement ::= FOR LPAREN fors fors RPAREN statement 
            {
              Iteration_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new For_statement(x,y,null,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iteration_statement ::= FOR LPAREN fors fors expression RPAREN statement 
            {
              Iteration_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression z = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new For_statement(x,y,z,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // iteration_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Iteration_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement y = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new While_statement(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Selection_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement y = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement z = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Selection_statement(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // selection_statement ::= IF LPAREN expression RPAREN statement 
            {
              Selection_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement y = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Selection_statement(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statements ::= statements statement 
            {
              Statements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements x = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement y = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statements ::= 
            {
              Statements RESULT =null;
		RESULT=new Statements();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declarations ::= declarations declaration 
            {
              Declarations RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarations x = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration y = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declarations ::= 
            {
              Declarations RESULT =null;
		RESULT=new Declarations();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compound_statement ::= LBRACE NT$3 declarations statements RBRACE 
            {
              Compound_statement RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Compound_statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarations x = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements y = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ParserTest.endScope();RESULT=new Compound_statement(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$3 ::= 
            {
              Compound_statement RESULT =null;
ParserTest.beginScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_statement ::= SEMICOLON 
            {
              Expression_statement RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_statement ::= expression SEMICOLON 
            {
              Expression_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Expression_statement(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= jump_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Jump_statement x = (Jump_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iteration_statement x = (Iteration_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= selection_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Selection_statement x = (Selection_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= compound_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Compound_statement x = (Compound_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= expression_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression_statement x = (Expression_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // plain_declarator ::= ID 
            {
              Plain_declarator RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Plain_declarator(symbol(i));if(ParserTest.isTypedef())ParserTest.addTypeID(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // plain_declarator ::= ASTER plain_declarator 
            {
              Plain_declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plain_declarator x = (Plain_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Plain_declarator(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constant_expressions ::= constant_expressions LBRACK constant_expression RBRACK 
            {
              Constant_expressions RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Constant_expressions x = (Constant_expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Constant_expression y = (Constant_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expressions",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constant_expressions ::= LBRACK constant_expression RBRACK 
            {
              Constant_expressions RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Constant_expression x = (Constant_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Constant_expressions(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expressions",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declarator ::= plain_declarator 
            {
              Declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plain_declarator x = (Plain_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Declarator(x,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declarator ::= plain_declarator constant_expressions 
            {
              Declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Plain_declarator x = (Plain_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant_expressions y = (Constant_expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Declarator(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declarator ::= plain_declarator LPAREN RPAREN 
            {
              Declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Plain_declarator x = (Plain_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new Declarator(x,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declarator ::= plain_declarator LPAREN parameters RPAREN 
            {
              Declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Plain_declarator x = (Plain_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Parameters y = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Declarator(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // plain_declaration ::= type_specifier declarator 
            {
              Plain_declaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator y = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Plain_declaration(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_or_union ::= UNION 
            {
              Boolean RESULT =null;
		ParserTest.beginRecorddef();RESULT=false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struct_or_union ::= STRUCT 
            {
              Boolean RESULT =null;
		ParserTest.beginRecorddef();RESULT=true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structs ::= structs type_specifier declarators SEMICOLON 
            {
              Structs RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Structs x = (Structs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type_specifier y = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarators z = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x.add(y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // structs ::= type_specifier declarators SEMICOLON 
            {
              Structs RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarators y = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Structs(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_specifier ::= struct_or_union ID 
            {
              Type_specifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ParserTest.endRecorddef();RESULT=new Id_type(symbol(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_specifier ::= struct_or_union LBRACE NT$2 structs RBRACE 
            {
              Type_specifier RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Type_specifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Structs y = (Structs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Record_type(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$2 ::= 
            {
              Type_specifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
ParserTest.endRecorddef();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_specifier ::= struct_or_union ID NT$1 LBRACE structs RBRACE 
            {
              Type_specifier RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Type_specifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Structs y = (Structs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Record_type(x,symbol(i),y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Type_specifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
ParserTest.endRecorddef();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_specifier ::= TYPEID 
            {
              Type_specifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Id_type(symbol(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_specifier ::= INT 
            {
              Type_specifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new IntType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_specifier ::= CHAR 
            {
              Type_specifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new CharType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_specifier ::= VOID 
            {
              Type_specifier RESULT =null;
		RESULT=new VoidType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // initializers ::= initializers COMMA initializer 
            {
              Initializers RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Initializers x = (Initializers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer y = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // initializers ::= initializer 
            {
              Initializers RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer x = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Initializers(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initializer ::= LBRACE initializers RBRACE 
            {
              Initializer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Initializers x = (Initializers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Initializer(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initializer ::= assignment_expression 
            {
              Initializer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment_expression x = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Initializer(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // init_declarator ::= declarator 
            {
              Init_declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator x = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Init_declarator(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // init_declarator ::= declarator ASSIGN initializer 
            {
              Init_declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarator x = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer y = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Init_declarator(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // init_declarators ::= init_declarator 
            {
              Init_declarators RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Init_declarator x = (Init_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ParserTest.beginVardef();RESULT=new Init_declarators(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // init_declarators ::= init_declarators COMMA init_declarator 
            {
              Init_declarators RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Init_declarators x = (Init_declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Init_declarator y = (Init_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarators ::= declarator 
            {
              Declarators RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator x = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Declarators(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarators ::= declarators COMMA declarator 
            {
              Declarators RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarators x = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator y = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plain_declarations ::= plain_declarations COMMA plain_declaration 
            {
              Plain_declarations RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Plain_declarations x = (Plain_declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plain_declaration y = (Plain_declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarations",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // plain_declarations ::= COMMA plain_declaration 
            {
              Plain_declarations RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plain_declaration x = (Plain_declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Plain_declarations(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarations",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= plain_declaration 
            {
              Parameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plain_declaration x = (Plain_declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Parameters(x,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= plain_declaration COMMA ELLIPSIS 
            {
              Parameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Plain_declaration x = (Plain_declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new Parameters(x,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameters ::= plain_declaration plain_declarations 
            {
              Parameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Plain_declaration x = (Plain_declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plain_declarations y = (Plain_declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Parameters(x,y,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameters ::= plain_declaration plain_declarations COMMA ELLIPSIS 
            {
              Parameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Plain_declaration x = (Plain_declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Plain_declarations y = (Plain_declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new Parameters(x,y,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_definition ::= type_specifier plain_declarator LPAREN RPAREN compound_statement 
            {
              Function_definition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Plain_declarator y = (Plain_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Compound_statement z = (Compound_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Function_definition(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_definition ::= type_specifier plain_declarator LPAREN parameters RPAREN compound_statement 
            {
              Function_definition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Plain_declarator y = (Plain_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameters z = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Compound_statement s = (Compound_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Function_definition(x,y,z,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= type_specifier SEMICOLON 
            {
              Declaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Declaration(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= type_specifier init_declarators SEMICOLON 
            {
              Declaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Init_declarators y = (Init_declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ParserTest.endVardef();RESULT=new Declaration(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= TYPEDEF NT$0 type_specifier declarators SEMICOLON 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type_specifier x = (Type_specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarators y = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ParserTest.endTypedef();RESULT=new Declaration(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Declaration RESULT =null;
ParserTest.beginTypedef();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= function_definition 
            {
              Prog RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function_definition x = (Function_definition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= declaration 
            {
              Prog RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration x = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program prog 
            {
              Program RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program x = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Prog y = (Prog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Program(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= prog 
            {
              Program RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Prog x = (Prog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Program(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

