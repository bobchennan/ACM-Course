
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 07 18:53:58 CST 2013
//----------------------------------------------------

package cnx.syntactic;

import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 07 18:53:58 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\004\000\002\012\003\000\002\012" +
    "\004\000\002\011\003\000\002\011\003\000\002\070\002" +
    "\000\002\013\007\000\002\071\002\000\002\013\006\000" +
    "\002\013\004\000\002\015\010\000\002\015\007\000\002" +
    "\016\006\000\002\016\004\000\002\016\005\000\002\016" +
    "\003\000\002\002\004\000\002\002\005\000\002\017\005" +
    "\000\002\017\003\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\003\000\002\022\003\000\002" +
    "\022\005\000\002\005\003\000\002\005\005\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\072\002\000\002\023\010\000\002\073\002\000" +
    "\002\023\007\000\002\023\004\000\002\006\005\000\002" +
    "\006\006\000\002\024\003\000\002\024\003\000\002\025" +
    "\004\000\002\014\006\000\002\014\005\000\002\014\004" +
    "\000\002\014\003\000\002\004\005\000\002\004\006\000" +
    "\002\026\004\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\004\000\002\030\003\000\002\074\002" +
    "\000\002\031\007\000\002\007\002\000\002\007\004\000" +
    "\002\010\002\000\002\010\004\000\002\032\007\000\002" +
    "\032\011\000\002\033\007\000\002\033\011\000\002\033" +
    "\010\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\003\003\000\002\003\004\000\002\035\005\000" +
    "\002\035\003\000\002\037\003\000\002\037\005\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\040\003\000\002\041\005\000\002" +
    "\041\003\000\002\042\005\000\002\042\003\000\002\043" +
    "\005\000\002\043\003\000\002\044\005\000\002\044\003" +
    "\000\002\045\005\000\002\045\003\000\002\046\005\000" +
    "\002\046\003\000\002\047\003\000\002\047\003\000\002" +
    "\050\005\000\002\050\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\052\005" +
    "\000\002\052\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\005\000\002\054\003\000\002\055\003\000\002" +
    "\055\003\000\002\056\005\000\002\056\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\060\003" +
    "\000\002\060\006\000\002\061\004\000\002\061\003\000" +
    "\002\062\003\000\002\062\004\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\062\006\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\064\006\000" +
    "\002\064\006\000\002\064\005\000\002\064\005\000\002" +
    "\064\005\000\002\064\004\000\002\064\004\000\002\064" +
    "\003\000\002\065\005\000\002\065\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\005\000" +
    "\002\067\003\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\020\004\015\005\012\006\020\007\004\010" +
    "\011\011\010\102\017\001\002\000\012\023\uffe3\024\uffe3" +
    "\042\uffe3\101\uffe3\001\002\000\006\027\352\101\351\001" +
    "\002\000\022\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\102\ufffd\001\002\000\022\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\102\ufffe" +
    "\001\002\000\006\027\uffd9\101\uffd9\001\002\000\006\027" +
    "\uffda\101\uffda\001\002\000\012\023\uffe5\024\uffe5\042\uffe5" +
    "\101\uffe5\001\002\000\022\002\347\004\015\005\012\006" +
    "\020\007\004\010\011\011\010\102\017\001\002\000\022" +
    "\002\000\004\000\005\000\006\000\007\000\010\000\011" +
    "\000\102\000\001\002\000\016\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\102\ufffc\001\002\000\010\024\023\042" +
    "\024\101\021\001\002\000\012\023\uffe2\024\uffe2\042\uffe2" +
    "\101\uffe2\001\002\000\012\023\uffe4\024\uffe4\042\uffe4\101" +
    "\uffe4\001\002\000\016\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\031\uffd0\001\002\000\006\042\024\101\021\001" +
    "\002\000\100\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8\027\ufff8\030\ufff8" +
    "\035\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8\046\ufff8\060" +
    "\ufff8\061\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8" +
    "\001\002\000\006\042\024\101\021\001\002\000\004\022" +
    "\026\001\002\000\020\005\012\006\020\007\004\010\011" +
    "\011\010\023\031\102\017\001\002\000\006\023\ufff2\025" +
    "\311\001\002\000\006\042\024\101\021\001\002\000\004" +
    "\027\034\001\002\000\004\023\033\001\002\000\004\027" +
    "\034\001\002\000\076\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\027\uffc8\030\uffc8" +
    "\035\uffc8\040\uffc8\041\uffc8\042\uffc8\045\uffc8\046\uffc8\060" +
    "\uffc8\061\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8" +
    "\001\002\000\022\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\102\ufff7\001\002\000\076\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\024\uffc6\027\uffc6\030\uffc6\035\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\045\uffc6\046\uffc6\060\uffc6\061\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\001\002\000\076\004\015\005" +
    "\012\006\020\007\004\010\011\011\010\012\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024" +
    "\uffc4\027\uffc4\030\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\045\uffc4\046\uffc4\060\uffc4\061\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\017\001\002\000\076\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\027\uffc5\030\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\045" +
    "\uffc5\046\uffc5\060\uffc5\061\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\001\002\000\060\012\070\014\107\015" +
    "\054\016\051\017\100\020\075\021\056\022\050\024\060" +
    "\027\034\030\110\035\114\040\067\041\053\042\047\045" +
    "\113\046\057\060\065\061\116\076\043\077\115\100\066" +
    "\101\071\001\002\000\010\024\023\042\ufffa\101\ufffa\001" +
    "\002\000\122\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b" +
    "\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036" +
    "\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b" +
    "\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055" +
    "\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\064\uff6b" +
    "\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073" +
    "\uff6b\074\uff6b\075\uff6b\001\002\000\052\023\uff93\024\uff93" +
    "\025\uff93\030\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\040\135\041\136\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\001\002\000" +
    "\062\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\024\uffcc\027\uffcc\030\uffcc\035" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\045\uffcc\046\uffcc\060\uffcc" +
    "\061\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\001\002\000" +
    "\062\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\024\uffcb\027\uffcb\030\uffcb\035" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\045\uffcb\046\uffcb\060\uffcb" +
    "\061\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\001\002\000" +
    "\036\021\uff7c\022\uff7c\035\uff7c\040\uff7c\041\uff7c\042\uff7c" +
    "\045\uff7c\046\uff7c\060\uff7c\061\uff7c\076\uff7c\077\uff7c\100" +
    "\uff7c\101\uff7c\001\002\000\052\005\012\006\020\007\004" +
    "\010\011\011\010\021\056\022\050\035\114\040\067\041" +
    "\053\042\047\045\113\046\057\060\065\061\116\076\043" +
    "\077\115\100\066\101\071\102\017\001\002\000\004\024" +
    "\266\001\002\000\062\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\027" +
    "\uffce\030\uffce\035\uffce\040\uffce\041\uffce\042\uffce\045\uffce" +
    "\046\uffce\060\uffce\061\uffce\076\uffce\077\uffce\100\uffce\101" +
    "\uffce\001\002\000\036\021\uff7a\022\uff7a\035\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\045\uff7a\046\uff7a\060\uff7a\061\uff7a\076" +
    "\uff7a\077\uff7a\100\uff7a\101\uff7a\001\002\000\004\022\256" +
    "\001\002\000\122\022\uff70\023\uff70\024\uff70\025\uff70\026" +
    "\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70" +
    "\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70" +
    "\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70\064" +
    "\uff70\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70" +
    "\073\uff70\074\uff70\075\uff70\001\002\000\036\021\056\022" +
    "\251\035\114\040\067\041\053\042\047\045\113\046\057" +
    "\060\065\061\116\076\043\077\115\100\066\101\071\001" +
    "\002\000\036\021\uff78\022\uff78\035\uff78\040\uff78\041\uff78" +
    "\042\uff78\045\uff78\046\uff78\060\uff78\061\uff78\076\uff78\077" +
    "\uff78\100\uff78\101\uff78\001\002\000\062\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\024\uffc9\027\uffc9\030\uffc9\035\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\045\uffc9\046\uffc9\060\uffc9\061\uffc9\076\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\001\002\000\016\023\uffb6\024\uffb6" +
    "\025\uffb6\030\uffb6\032\uffb6\050\246\001\002\000\032\023" +
    "\uff9f\024\uff9f\025\uff9f\030\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\050\uff9f\051\uff9f\052\166\053\170\001\002\000" +
    "\024\023\uffa3\024\uffa3\025\uffa3\030\uffa3\032\uffa3\033\uffa3" +
    "\034\162\050\uffa3\051\uffa3\001\002\000\060\023\uff8b\024" +
    "\uff8b\025\uff8b\030\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b" +
    "\056\uff8b\057\uff8b\001\002\000\036\021\056\022\147\035" +
    "\114\040\067\041\053\042\047\045\113\046\057\060\065" +
    "\061\116\076\043\077\115\100\066\101\071\001\002\000" +
    "\122\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69\030\uff69" +
    "\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037" +
    "\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\047\uff69" +
    "\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056" +
    "\uff69\057\uff69\060\uff69\061\uff69\062\uff69\064\uff69\065\uff69" +
    "\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074" +
    "\uff69\075\uff69\001\002\000\036\021\uff7b\022\uff7b\035\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\045\uff7b\046\uff7b\060\uff7b\061" +
    "\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\001\002\000\004" +
    "\022\237\001\002\000\122\022\uff6d\023\uff6d\024\uff6d\025" +
    "\uff6d\026\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d" +
    "\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\044\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d" +
    "\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062" +
    "\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\074\uff6d\075\uff6d\001\002\000\006\024" +
    "\236\025\151\001\002\000\060\012\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\027" +
    "\uffc3\030\uffc3\035\uffc3\040\uffc3\041\uffc3\042\uffc3\045\uffc3" +
    "\046\uffc3\060\uffc3\061\uffc3\076\uffc3\077\uffc3\100\uffc3\101" +
    "\uffc3\001\002\000\106\023\uff87\024\uff87\025\uff87\026\231" +
    "\030\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\050\uff87" +
    "\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057" +
    "\uff87\064\222\065\227\066\232\067\233\070\226\071\221" +
    "\072\225\073\234\074\224\075\223\001\002\000\040\021" +
    "\056\022\050\024\215\035\114\040\067\041\053\042\047" +
    "\045\113\046\057\060\065\061\116\076\043\077\115\100" +
    "\066\101\071\001\002\000\122\022\uff6c\023\uff6c\024\uff6c" +
    "\025\uff6c\026\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034" +
    "\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\044\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053" +
    "\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c" +
    "\062\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071" +
    "\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\001\002\000\062" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\024\uffcd\027\uffcd\030\uffcd\035\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd\060\uffcd\061" +
    "\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\001\002\000\004" +
    "\024\214\001\002\000\122\022\200\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\030\uff83\031\175\032\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\047\201\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\057\uff83\060\174\061\176\062" +
    "\177\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\074\uff83\075\uff83\001\002\000\020\023" +
    "\uffa7\024\uffa7\025\uffa7\030\uffa7\032\uffa7\050\uffa7\051\172" +
    "\001\002\000\046\023\uff99\024\uff99\025\uff99\030\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\133\057" +
    "\131\001\002\000\026\023\uffa1\024\uffa1\025\uffa1\030\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\164\050\uffa1\051\uffa1\001" +
    "\002\000\022\023\uffa5\024\uffa5\025\uffa5\030\uffa5\032\uffa5" +
    "\033\160\050\uffa5\051\uffa5\001\002\000\012\023\uffb7\024" +
    "\uffb7\025\uffb7\032\uffb7\001\002\000\004\022\154\001\002" +
    "\000\102\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\027\uffc7\030" +
    "\uffc7\035\uffc7\040\uffc7\041\uffc7\042\uffc7\045\uffc7\046\uffc7" +
    "\060\uffc7\061\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\001\002\000\060\023\uff8f\024\uff8f\025\uff8f\030\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\142\043\144\044\141\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\001" +
    "\002\000\062\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\027\uffcf\030" +
    "\uffcf\035\uffcf\040\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf" +
    "\060\uffcf\061\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\001" +
    "\002\000\036\021\uff79\022\uff79\035\uff79\040\uff79\041\uff79" +
    "\042\uff79\045\uff79\046\uff79\060\uff79\061\uff79\076\uff79\077" +
    "\uff79\100\uff79\101\uff79\001\002\000\036\021\uff7d\022\uff7d" +
    "\035\uff7d\040\uff7d\041\uff7d\042\uff7d\045\uff7d\046\uff7d\060" +
    "\uff7d\061\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\001\002" +
    "\000\122\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\030" +
    "\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68" +
    "\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\047" +
    "\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68" +
    "\056\uff68\057\uff68\060\uff68\061\uff68\062\uff68\064\uff68\065" +
    "\uff68\066\uff68\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68" +
    "\074\uff68\075\uff68\001\002\000\036\021\056\022\147\035" +
    "\114\040\067\041\053\042\047\045\113\046\057\060\065" +
    "\061\116\076\043\077\115\100\066\101\071\001\002\000" +
    "\042\023\uff9d\024\uff9d\025\uff9d\030\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\123\037\124\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\126\055\127\001\002\000\036\021\056" +
    "\022\050\035\114\040\067\041\053\042\047\045\113\046" +
    "\057\060\065\061\116\076\043\077\115\100\066\101\071" +
    "\001\002\000\106\023\uff80\024\uff80\025\uff80\026\uff80\030" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\050\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80" +
    "\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\074\uff80\075\uff80\001\002\000\106\023\uff87" +
    "\024\uff87\025\uff87\026\uff87\030\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\057\uff87\064\uff87\065\uff87\066\uff87" +
    "\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075" +
    "\uff87\001\002\000\036\021\uff98\022\uff98\035\uff98\040\uff98" +
    "\041\uff98\042\uff98\045\uff98\046\uff98\060\uff98\061\uff98\076" +
    "\uff98\077\uff98\100\uff98\101\uff98\001\002\000\036\021\uff97" +
    "\022\uff97\035\uff97\040\uff97\041\uff97\042\uff97\045\uff97\046" +
    "\uff97\060\uff97\061\uff97\076\uff97\077\uff97\100\uff97\101\uff97" +
    "\001\002\000\036\021\056\022\050\035\114\040\067\041" +
    "\053\042\047\045\113\046\057\060\065\061\116\076\043" +
    "\077\115\100\066\101\071\001\002\000\036\021\uff96\022" +
    "\uff96\035\uff96\040\uff96\041\uff96\042\uff96\045\uff96\046\uff96" +
    "\060\uff96\061\uff96\076\uff96\077\uff96\100\uff96\101\uff96\001" +
    "\002\000\036\021\uff95\022\uff95\035\uff95\040\uff95\041\uff95" +
    "\042\uff95\045\uff95\046\uff95\060\uff95\061\uff95\076\uff95\077" +
    "\uff95\100\uff95\101\uff95\001\002\000\046\023\uff9a\024\uff9a" +
    "\025\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\133\057\131\001\002\000\036\021\uff91\022" +
    "\uff91\035\uff91\040\uff91\041\uff91\042\uff91\045\uff91\046\uff91" +
    "\060\uff91\061\uff91\076\uff91\077\uff91\100\uff91\101\uff91\001" +
    "\002\000\036\021\056\022\050\035\114\040\067\041\053" +
    "\042\047\045\113\046\057\060\065\061\116\076\043\077" +
    "\115\100\066\101\071\001\002\000\036\021\uff92\022\uff92" +
    "\035\uff92\040\uff92\041\uff92\042\uff92\045\uff92\046\uff92\060" +
    "\uff92\061\uff92\076\uff92\077\uff92\100\uff92\101\uff92\001\002" +
    "\000\052\023\uff94\024\uff94\025\uff94\030\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\135\041\136" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\057\uff94\001\002\000\036\021\uff8e\022\uff8e\035\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\045\uff8e\046\uff8e\060\uff8e\061" +
    "\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\001\002\000\036" +
    "\021\uff8d\022\uff8d\035\uff8d\040\uff8d\041\uff8d\042\uff8d\045" +
    "\uff8d\046\uff8d\060\uff8d\061\uff8d\076\uff8d\077\uff8d\100\uff8d" +
    "\101\uff8d\001\002\000\036\021\056\022\050\035\114\040" +
    "\067\041\053\042\047\045\113\046\057\060\065\061\116" +
    "\076\043\077\115\100\066\101\071\001\002\000\060\023" +
    "\uff90\024\uff90\025\uff90\030\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\142\043" +
    "\144\044\141\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\001\002\000\036\021\uff88\022" +
    "\uff88\035\uff88\040\uff88\041\uff88\042\uff88\045\uff88\046\uff88" +
    "\060\uff88\061\uff88\076\uff88\077\uff88\100\uff88\101\uff88\001" +
    "\002\000\036\021\uff8a\022\uff8a\035\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\045\uff8a\046\uff8a\060\uff8a\061\uff8a\076\uff8a\077" +
    "\uff8a\100\uff8a\101\uff8a\001\002\000\036\021\056\022\050" +
    "\035\114\040\067\041\053\042\047\045\113\046\057\060" +
    "\065\061\116\076\043\077\115\100\066\101\071\001\002" +
    "\000\036\021\uff89\022\uff89\035\uff89\040\uff89\041\uff89\042" +
    "\uff89\045\uff89\046\uff89\060\uff89\061\uff89\076\uff89\077\uff89" +
    "\100\uff89\101\uff89\001\002\000\060\023\uff8c\024\uff8c\025" +
    "\uff8c\030\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\001\002\000\106\023\uff81\024\uff81\025\uff81\026" +
    "\uff81\030\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81" +
    "\057\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071" +
    "\uff81\072\uff81\073\uff81\074\uff81\075\uff81\001\002\000\036" +
    "\021\056\022\050\035\114\040\067\041\053\042\047\045" +
    "\113\046\057\060\065\061\116\076\043\077\115\100\066" +
    "\101\071\001\002\000\006\023\152\025\151\001\002\000" +
    "\036\021\056\022\050\035\114\040\067\041\053\042\047" +
    "\045\113\046\057\060\065\061\116\076\043\077\115\100" +
    "\066\101\071\001\002\000\122\022\uff6a\023\uff6a\024\uff6a" +
    "\025\uff6a\026\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034" +
    "\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a" +
    "\043\uff6a\044\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053" +
    "\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a" +
    "\062\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071" +
    "\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\001\002\000\012" +
    "\023\uffb8\024\uffb8\025\uffb8\032\uffb8\001\002\000\036\021" +
    "\056\022\050\035\114\040\067\041\053\042\047\045\113" +
    "\046\057\060\065\061\116\076\043\077\115\100\066\101" +
    "\071\001\002\000\006\023\156\025\151\001\002\000\056" +
    "\012\070\014\107\015\054\016\051\017\100\020\075\021" +
    "\056\022\050\024\060\027\034\035\114\040\067\041\053" +
    "\042\047\045\113\046\057\060\065\061\116\076\043\077" +
    "\115\100\066\101\071\001\002\000\062\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\024\uffc0\027\uffc0\030\uffc0\035\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\045\uffc0\046\uffc0\060\uffc0\061\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\001\002\000\036\021\056\022\050" +
    "\035\114\040\067\041\053\042\047\045\113\046\057\060" +
    "\065\061\116\076\043\077\115\100\066\101\071\001\002" +
    "\000\024\023\uffa4\024\uffa4\025\uffa4\030\uffa4\032\uffa4\033" +
    "\uffa4\034\162\050\uffa4\051\uffa4\001\002\000\036\021\056" +
    "\022\050\035\114\040\067\041\053\042\047\045\113\046" +
    "\057\060\065\061\116\076\043\077\115\100\066\101\071" +
    "\001\002\000\026\023\uffa2\024\uffa2\025\uffa2\030\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\164\050\uffa2\051\uffa2\001\002" +
    "\000\036\021\056\022\050\035\114\040\067\041\053\042" +
    "\047\045\113\046\057\060\065\061\116\076\043\077\115" +
    "\100\066\101\071\001\002\000\032\023\uffa0\024\uffa0\025" +
    "\uffa0\030\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\050\uffa0" +
    "\051\uffa0\052\166\053\170\001\002\000\036\021\uff9c\022" +
    "\uff9c\035\uff9c\040\uff9c\041\uff9c\042\uff9c\045\uff9c\046\uff9c" +
    "\060\uff9c\061\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\001" +
    "\002\000\036\021\056\022\050\035\114\040\067\041\053" +
    "\042\047\045\113\046\057\060\065\061\116\076\043\077" +
    "\115\100\066\101\071\001\002\000\036\021\uff9b\022\uff9b" +
    "\035\uff9b\040\uff9b\041\uff9b\042\uff9b\045\uff9b\046\uff9b\060" +
    "\uff9b\061\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\001\002" +
    "\000\042\023\uff9e\024\uff9e\025\uff9e\030\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\123\037\124\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\126\055\127\001\002\000\036\021" +
    "\056\022\050\035\114\040\067\041\053\042\047\045\113" +
    "\046\057\060\065\061\116\076\043\077\115\100\066\101" +
    "\071\001\002\000\022\023\uffa6\024\uffa6\025\uffa6\030\uffa6" +
    "\032\uffa6\033\160\050\uffa6\051\uffa6\001\002\000\122\022" +
    "\uff72\023\uff72\024\uff72\025\uff72\026\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\047\uff72\050\uff72" +
    "\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057" +
    "\uff72\060\uff72\061\uff72\062\uff72\064\uff72\065\uff72\066\uff72" +
    "\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075" +
    "\uff72\001\002\000\036\021\056\022\050\035\114\040\067" +
    "\041\053\042\047\045\113\046\057\060\065\061\116\076" +
    "\043\077\115\100\066\101\071\001\002\000\122\022\uff71" +
    "\023\uff71\024\uff71\025\uff71\026\uff71\030\uff71\031\uff71\032" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\047\uff71\050\uff71\051" +
    "\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71" +
    "\060\uff71\061\uff71\062\uff71\064\uff71\065\uff71\066\uff71\067" +
    "\uff71\070\uff71\071\uff71\072\uff71\073\uff71\074\uff71\075\uff71" +
    "\001\002\000\004\101\211\001\002\000\040\021\056\022" +
    "\050\023\203\035\114\040\067\041\053\042\047\045\113" +
    "\046\057\060\065\061\116\076\043\077\115\100\066\101" +
    "\071\001\002\000\004\101\202\001\002\000\122\022\uff74" +
    "\023\uff74\024\uff74\025\uff74\026\uff74\030\uff74\031\uff74\032" +
    "\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\uff74\043\uff74\044\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\060\uff74\061\uff74\062\uff74\064\uff74\065\uff74\066\uff74\067" +
    "\uff74\070\uff74\071\uff74\072\uff74\073\uff74\074\uff74\075\uff74" +
    "\001\002\000\122\022\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044" +
    "\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\064" +
    "\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75" +
    "\073\uff75\074\uff75\075\uff75\001\002\000\006\023\uff6e\025" +
    "\uff6e\001\002\000\006\023\207\025\206\001\002\000\036" +
    "\021\056\022\050\035\114\040\067\041\053\042\047\045" +
    "\113\046\057\060\065\061\116\076\043\077\115\100\066" +
    "\101\071\001\002\000\122\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043" +
    "\uff76\044\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76" +
    "\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062" +
    "\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76" +
    "\072\uff76\073\uff76\074\uff76\075\uff76\001\002\000\006\023" +
    "\uff6f\025\uff6f\001\002\000\122\022\uff73\023\uff73\024\uff73" +
    "\025\uff73\026\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053" +
    "\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73" +
    "\062\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73\071" +
    "\uff73\072\uff73\073\uff73\074\uff73\075\uff73\001\002\000\006" +
    "\025\151\032\213\001\002\000\122\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\030\uff77\031\uff77\032\uff77\033\uff77" +
    "\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042" +
    "\uff77\043\uff77\044\uff77\047\uff77\050\uff77\051\uff77\052\uff77" +
    "\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061" +
    "\uff77\062\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77" +
    "\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\001\002\000" +
    "\062\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\024\uffbc\027\uffbc\030\uffbc\035" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\060\uffbc" +
    "\061\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\001\002\000" +
    "\064\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\027\uffba\030" +
    "\uffba\035\uffba\040\uffba\041\uffba\042\uffba\045\uffba\046\uffba" +
    "\060\uffba\061\uffba\076\uffba\077\uffba\100\uffba\101\uffba\001" +
    "\002\000\006\024\220\025\151\001\002\000\062\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\024\uffbb\027\uffbb\030\uffbb\035\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\045\uffbb\046\uffbb\060\uffbb\061\uffbb\076" +
    "\uffbb\077\uffbb\100\uffbb\101\uffbb\001\002\000\064\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\027\uffb9\030\uffb9\035\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9\060\uffb9\061" +
    "\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\001\002\000\036" +
    "\021\uffae\022\uffae\035\uffae\040\uffae\041\uffae\042\uffae\045" +
    "\uffae\046\uffae\060\uffae\061\uffae\076\uffae\077\uffae\100\uffae" +
    "\101\uffae\001\002\000\036\021\uffb3\022\uffb3\035\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\045\uffb3\046\uffb3\060\uffb3\061\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\101\uffb3\001\002\000\036\021" +
    "\uffaa\022\uffaa\035\uffaa\040\uffaa\041\uffaa\042\uffaa\045\uffaa" +
    "\046\uffaa\060\uffaa\061\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\001\002\000\036\021\uffab\022\uffab\035\uffab\040\uffab" +
    "\041\uffab\042\uffab\045\uffab\046\uffab\060\uffab\061\uffab\076" +
    "\uffab\077\uffab\100\uffab\101\uffab\001\002\000\036\021\uffad" +
    "\022\uffad\035\uffad\040\uffad\041\uffad\042\uffad\045\uffad\046" +
    "\uffad\060\uffad\061\uffad\076\uffad\077\uffad\100\uffad\101\uffad" +
    "\001\002\000\036\021\uffaf\022\uffaf\035\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\045\uffaf\046\uffaf\060\uffaf\061\uffaf\076\uffaf" +
    "\077\uffaf\100\uffaf\101\uffaf\001\002\000\036\021\uffb2\022" +
    "\uffb2\035\uffb2\040\uffb2\041\uffb2\042\uffb2\045\uffb2\046\uffb2" +
    "\060\uffb2\061\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\001" +
    "\002\000\036\021\056\022\050\035\114\040\067\041\053" +
    "\042\047\045\113\046\057\060\065\061\116\076\043\077" +
    "\115\100\066\101\071\001\002\000\036\021\uffb4\022\uffb4" +
    "\035\uffb4\040\uffb4\041\uffb4\042\uffb4\045\uffb4\046\uffb4\060" +
    "\uffb4\061\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\001\002" +
    "\000\036\021\uffb1\022\uffb1\035\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\045\uffb1\046\uffb1\060\uffb1\061\uffb1\076\uffb1\077\uffb1" +
    "\100\uffb1\101\uffb1\001\002\000\036\021\uffb0\022\uffb0\035" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\045\uffb0\046\uffb0\060\uffb0" +
    "\061\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\001\002\000" +
    "\036\021\uffac\022\uffac\035\uffac\040\uffac\041\uffac\042\uffac" +
    "\045\uffac\046\uffac\060\uffac\061\uffac\076\uffac\077\uffac\100" +
    "\uffac\101\uffac\001\002\000\014\023\uffb5\024\uffb5\025\uffb5" +
    "\030\uffb5\032\uffb5\001\002\000\062\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\024\uffca\027\uffca\030\uffca\035\uffca\040\uffca\041\uffca\042" +
    "\uffca\045\uffca\046\uffca\060\uffca\061\uffca\076\uffca\077\uffca" +
    "\100\uffca\101\uffca\001\002\000\036\021\056\022\050\035" +
    "\114\040\067\041\053\042\047\045\113\046\057\060\065" +
    "\061\116\076\043\077\115\100\066\101\071\001\002\000" +
    "\006\023\241\025\151\001\002\000\056\012\070\014\107" +
    "\015\054\016\051\017\100\020\075\021\056\022\050\024" +
    "\060\027\034\035\114\040\067\041\053\042\047\045\113" +
    "\046\057\060\065\061\116\076\043\077\115\100\066\101" +
    "\071\001\002\000\062\012\uffc2\013\243\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\027" +
    "\uffc2\030\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\045\uffc2" +
    "\046\uffc2\060\uffc2\061\uffc2\076\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\001\002\000\056\012\070\014\107\015\054\016\051" +
    "\017\100\020\075\021\056\022\050\024\060\027\034\035" +
    "\114\040\067\041\053\042\047\045\113\046\057\060\065" +
    "\061\116\076\043\077\115\100\066\101\071\001\002\000" +
    "\062\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\024\uffc1\027\uffc1\030\uffc1\035" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\046\uffc1\060\uffc1" +
    "\061\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\001\002\000" +
    "\106\023\uff82\024\uff82\025\uff82\026\uff82\030\uff82\032\uff82" +
    "\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\044\uff82\050\uff82\051\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\064\uff82\065" +
    "\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82" +
    "\074\uff82\075\uff82\001\002\000\036\021\056\022\050\035" +
    "\114\040\067\041\053\042\047\045\113\046\057\060\065" +
    "\061\116\076\043\077\115\100\066\101\071\001\002\000" +
    "\020\023\uffa8\024\uffa8\025\uffa8\030\uffa8\032\uffa8\050\uffa8" +
    "\051\172\001\002\000\106\023\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\030\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f" +
    "\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\057\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\001\002\000\052" +
    "\005\012\006\020\007\004\010\011\011\010\021\056\022" +
    "\050\035\114\040\067\041\053\042\047\045\113\046\057" +
    "\060\065\061\116\076\043\077\115\100\066\101\071\102" +
    "\017\001\002\000\006\023\uff84\042\uff84\001\002\000\006" +
    "\023\254\042\255\001\002\000\106\023\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\030\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044" +
    "\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e" +
    "\056\uff7e\057\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\001\002" +
    "\000\006\023\uff85\042\uff85\001\002\000\040\021\056\022" +
    "\050\024\215\035\114\040\067\041\053\042\047\045\113" +
    "\046\057\060\065\061\116\076\043\077\115\100\066\101" +
    "\071\001\002\000\040\021\056\022\050\024\215\035\114" +
    "\040\067\041\053\042\047\045\113\046\057\060\065\061" +
    "\116\076\043\077\115\100\066\101\071\001\002\000\040" +
    "\021\056\022\050\023\261\035\114\040\067\041\053\042" +
    "\047\045\113\046\057\060\065\061\116\076\043\077\115" +
    "\100\066\101\071\001\002\000\056\012\070\014\107\015" +
    "\054\016\051\017\100\020\075\021\056\022\050\024\060" +
    "\027\034\035\114\040\067\041\053\042\047\045\113\046" +
    "\057\060\065\061\116\076\043\077\115\100\066\101\071" +
    "\001\002\000\006\023\263\025\151\001\002\000\056\012" +
    "\070\014\107\015\054\016\051\017\100\020\075\021\056" +
    "\022\050\024\060\027\034\035\114\040\067\041\053\042" +
    "\047\045\113\046\057\060\065\061\116\076\043\077\115" +
    "\100\066\101\071\001\002\000\062\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\024\uffbf\027\uffbf\030\uffbf\035\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\045\uffbf\046\uffbf\060\uffbf\061\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\101\uffbf\001\002\000\062\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\024\uffbe\027\uffbe\030\uffbe\035\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\045\uffbe\046\uffbe\060\uffbe\061\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\101\uffbe\001\002\000\062\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\027\uffbd\030\uffbd\035\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\045\uffbd\046\uffbd\060\uffbd\061\uffbd\076\uffbd\077\uffbd" +
    "\100\uffbd\101\uffbd\001\002\000\006\023\270\042\255\001" +
    "\002\000\036\021\056\022\050\035\114\040\067\041\053" +
    "\042\047\045\113\046\057\060\065\061\116\076\043\077" +
    "\115\100\066\101\071\001\002\000\106\023\uff86\024\uff86" +
    "\025\uff86\026\uff86\030\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
    "\044\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055" +
    "\uff86\056\uff86\057\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\001" +
    "\002\000\022\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\102\ufff6\001\002\000\006\023\uffd8\025" +
    "\uffd8\001\002\000\016\022\277\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\031\276\001\002\000\014\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\031\306\001\002\000\036\021\056\022\050" +
    "\035\114\040\067\041\053\042\047\045\113\046\057\060" +
    "\065\061\116\076\043\077\115\100\066\101\071\001\002" +
    "\000\020\005\012\006\020\007\004\010\011\011\010\023" +
    "\300\102\017\001\002\000\012\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\001\002\000\004\023\302\001\002\000\012\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\001\002\000\006\032\uffa9" +
    "\050\246\001\002\000\004\032\305\001\002\000\014\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\031\uffd3\001\002\000\036" +
    "\021\056\022\050\035\114\040\067\041\053\042\047\045" +
    "\113\046\057\060\065\061\116\076\043\077\115\100\066" +
    "\101\071\001\002\000\004\032\310\001\002\000\014\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2\001\002\000\020" +
    "\005\012\006\020\007\004\010\011\011\010\063\317\102" +
    "\017\001\002\000\006\023\ufff4\025\313\001\002\000\020" +
    "\005\012\006\020\007\004\010\011\011\010\063\315\102" +
    "\017\001\002\000\006\023\ufff0\025\ufff0\001\002\000\004" +
    "\023\ufff5\001\002\000\006\023\ufff1\025\ufff1\001\002\000" +
    "\004\023\ufff3\001\002\000\016\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\031\uffd1\001\002\000\010\024\uffea\025" +
    "\uffea\026\327\001\002\000\006\024\uffec\025\uffec\001\002" +
    "\000\006\024\325\025\324\001\002\000\006\042\024\101" +
    "\021\001\002\000\100\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\027\ufff9" +
    "\030\ufff9\035\ufff9\040\ufff9\041\ufff9\042\ufff9\045\ufff9\046" +
    "\ufff9\060\ufff9\061\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9" +
    "\102\ufff9\001\002\000\006\024\uffed\025\uffed\001\002\000" +
    "\040\021\056\022\050\027\331\035\114\040\067\041\053" +
    "\042\047\045\113\046\057\060\065\061\116\076\043\077" +
    "\115\100\066\101\071\001\002\000\010\024\uffe9\025\uffe9" +
    "\030\uffe9\001\002\000\040\021\056\022\050\027\331\035" +
    "\114\040\067\041\053\042\047\045\113\046\057\060\065" +
    "\061\116\076\043\077\115\100\066\101\071\001\002\000" +
    "\006\024\uffeb\025\uffeb\001\002\000\006\025\335\030\336" +
    "\001\002\000\006\025\uffe7\030\uffe7\001\002\000\040\021" +
    "\056\022\050\027\331\035\114\040\067\041\053\042\047" +
    "\045\113\046\057\060\065\061\116\076\043\077\115\100" +
    "\066\101\071\001\002\000\010\024\uffe8\025\uffe8\030\uffe8" +
    "\001\002\000\006\025\uffe6\030\uffe6\001\002\000\016\005" +
    "\012\006\020\007\004\010\011\011\010\102\017\001\002" +
    "\000\006\042\024\101\021\001\002\000\006\024\uffee\025" +
    "\uffee\001\002\000\006\024\345\025\344\001\002\000\006" +
    "\042\024\101\021\001\002\000\100\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024" +
    "\ufffb\027\ufffb\030\ufffb\035\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\045\ufffb\046\ufffb\060\ufffb\061\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\102\ufffb\001\002\000\006\024\uffef\025\uffef" +
    "\001\002\000\004\002\001\001\002\000\022\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\102\uffff" +
    "\001\002\000\014\023\uffdd\024\uffdd\027\uffe1\042\uffdd\101" +
    "\uffdd\001\002\000\016\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\102\uffdf\001\002\000\016\005\012\006\020\007" +
    "\004\010\011\011\010\102\017\001\002\000\006\042\024" +
    "\101\021\001\002\000\020\005\012\006\020\007\004\010" +
    "\011\011\010\030\357\102\017\001\002\000\006\042\024" +
    "\101\021\001\002\000\012\023\uffde\024\uffde\042\uffde\101" +
    "\uffde\001\002\000\006\024\361\025\344\001\002\000\020" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\030\uffdb\102" +
    "\uffdb\001\002\000\006\024\363\025\344\001\002\000\020" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\030\uffdc\102" +
    "\uffdc\001\002\000\004\027\365\001\002\000\016\005\012" +
    "\006\020\007\004\010\011\011\010\102\017\001\002\000" +
    "\020\005\012\006\020\007\004\010\011\011\010\030\367" +
    "\102\017\001\002\000\012\023\uffe0\024\uffe0\042\uffe0\101" +
    "\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\016\011\013\012\012\013\006\015\005\023" +
    "\015\024\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\347\013\006" +
    "\015\005\023\015\024\004\001\001\000\002\001\001\000" +
    "\004\070\337\001\001\000\006\026\024\071\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\320\020\322\021\321\026\273\001\001\000\002" +
    "\001\001\000\004\026\317\001\001\000\002\001\001\000" +
    "\012\016\031\023\027\024\004\025\026\001\001\000\004" +
    "\002\311\001\001\000\006\014\272\026\273\001\001\000" +
    "\004\031\271\001\001\000\002\001\001\000\004\031\034" +
    "\001\001\000\004\074\035\001\001\000\002\001\001\000" +
    "\004\007\036\001\001\000\012\010\040\013\037\023\041" +
    "\024\004\001\001\000\002\001\001\000\062\027\072\030" +
    "\111\031\051\032\076\033\044\034\045\035\071\037\105" +
    "\041\060\042\101\043\104\044\062\045\103\046\061\050" +
    "\116\052\102\054\043\056\110\060\063\062\073\063\117" +
    "\064\100\066\054\067\075\001\001\000\004\071\021\001" +
    "\001\000\002\001\001\000\004\055\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\023" +
    "\251\024\004\035\147\037\105\041\060\042\101\043\104" +
    "\044\062\045\103\046\061\050\116\052\102\054\043\056" +
    "\110\060\063\061\266\062\073\063\117\064\100\066\054" +
    "\067\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\062\247\063\117\064\100\066\054\067\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\062\244\063\117\064\100\066\054\067\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\227\001\001\000\050\003\216\035\215\037\105\041" +
    "\060\042\101\043\104\044\062\045\103\046\061\050\116" +
    "\052\102\054\043\056\110\060\063\062\073\063\117\064" +
    "\100\066\054\067\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\062" +
    "\145\063\117\064\100\066\054\067\075\001\001\000\004" +
    "\051\124\001\001\000\016\060\120\062\121\063\117\064" +
    "\100\066\054\067\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\052" +
    "\127\054\043\056\110\060\063\062\121\063\117\064\100" +
    "\066\054\067\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\131\001\001\000\002\001\001\000\022" +
    "\054\133\056\110\060\063\062\121\063\117\064\100\066" +
    "\054\067\075\001\001\000\002\001\001\000\004\055\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\056" +
    "\137\060\063\062\121\063\117\064\100\066\054\067\075" +
    "\001\001\000\004\057\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\060\144\062\121\063\117\064\100" +
    "\066\054\067\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\035\147\037\105\041\060" +
    "\042\101\043\104\044\062\045\103\046\061\050\116\052" +
    "\102\054\043\056\110\060\063\062\073\063\117\064\100" +
    "\066\054\067\075\001\001\000\002\001\001\000\044\037" +
    "\152\041\060\042\101\043\104\044\062\045\103\046\061" +
    "\050\116\052\102\054\043\056\110\060\063\062\073\063" +
    "\117\064\100\066\054\067\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\035\154\037\105\041\060\042" +
    "\101\043\104\044\062\045\103\046\061\050\116\052\102" +
    "\054\043\056\110\060\063\062\073\063\117\064\100\066" +
    "\054\067\075\001\001\000\002\001\001\000\062\027\156" +
    "\030\111\031\051\032\076\033\044\034\045\035\071\037" +
    "\105\041\060\042\101\043\104\044\062\045\103\046\061" +
    "\050\116\052\102\054\043\056\110\060\063\062\073\063" +
    "\117\064\100\066\054\067\075\001\001\000\002\001\001" +
    "\000\034\044\160\045\103\046\061\050\116\052\102\054" +
    "\043\056\110\060\063\062\121\063\117\064\100\066\054" +
    "\067\075\001\001\000\002\001\001\000\032\045\162\046" +
    "\061\050\116\052\102\054\043\056\110\060\063\062\121" +
    "\063\117\064\100\066\054\067\075\001\001\000\002\001" +
    "\001\000\030\046\164\050\116\052\102\054\043\056\110" +
    "\060\063\062\121\063\117\064\100\066\054\067\075\001" +
    "\001\000\004\047\166\001\001\000\002\001\001\000\026" +
    "\050\170\052\102\054\043\056\110\060\063\062\121\063" +
    "\117\064\100\066\054\067\075\001\001\000\002\001\001" +
    "\000\004\051\124\001\001\000\036\043\172\044\062\045" +
    "\103\046\061\050\116\052\102\054\043\056\110\060\063" +
    "\062\121\063\117\064\100\066\054\067\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\035\211\037\105" +
    "\041\060\042\101\043\104\044\062\045\103\046\061\050" +
    "\116\052\102\054\043\056\110\060\063\062\073\063\117" +
    "\064\100\066\054\067\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\037\203\041\060\042\101\043\104" +
    "\044\062\045\103\046\061\050\116\052\102\054\043\056" +
    "\110\060\063\062\073\063\117\064\100\065\204\066\054" +
    "\067\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\037\207\041\060\042\101\043\104\044\062\045\103\046" +
    "\061\050\116\052\102\054\043\056\110\060\063\062\073" +
    "\063\117\064\100\066\054\067\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\037\234\041\060\042\101\043\104\044\062\045" +
    "\103\046\061\050\116\052\102\054\043\056\110\060\063" +
    "\062\073\063\117\064\100\066\054\067\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\035" +
    "\237\037\105\041\060\042\101\043\104\044\062\045\103" +
    "\046\061\050\116\052\102\054\043\056\110\060\063\062" +
    "\073\063\117\064\100\066\054\067\075\001\001\000\002" +
    "\001\001\000\062\027\241\030\111\031\051\032\076\033" +
    "\044\034\045\035\071\037\105\041\060\042\101\043\104" +
    "\044\062\045\103\046\061\050\116\052\102\054\043\056" +
    "\110\060\063\062\073\063\117\064\100\066\054\067\075" +
    "\001\001\000\002\001\001\000\062\027\243\030\111\031" +
    "\051\032\076\033\044\034\045\035\071\037\105\041\060" +
    "\042\101\043\104\044\062\045\103\046\061\050\116\052" +
    "\102\054\043\056\110\060\063\062\073\063\117\064\100" +
    "\066\054\067\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\042\246\043\104\044\062\045\103\046\061" +
    "\050\116\052\102\054\043\056\110\060\063\062\121\063" +
    "\117\064\100\066\054\067\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\023\251\024\004\035\147\037" +
    "\105\041\060\042\101\043\104\044\062\045\103\046\061" +
    "\050\116\052\102\054\043\056\110\060\063\061\252\062" +
    "\073\063\117\064\100\066\054\067\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\256\035\215\037\105\041\060\042\101" +
    "\043\104\044\062\045\103\046\061\050\116\052\102\054" +
    "\043\056\110\060\063\062\073\063\117\064\100\066\054" +
    "\067\075\001\001\000\050\003\257\035\215\037\105\041" +
    "\060\042\101\043\104\044\062\045\103\046\061\050\116" +
    "\052\102\054\043\056\110\060\063\062\073\063\117\064" +
    "\100\066\054\067\075\001\001\000\046\035\261\037\105" +
    "\041\060\042\101\043\104\044\062\045\103\046\061\050" +
    "\116\052\102\054\043\056\110\060\063\062\073\063\117" +
    "\064\100\066\054\067\075\001\001\000\062\027\264\030" +
    "\111\031\051\032\076\033\044\034\045\035\071\037\105" +
    "\041\060\042\101\043\104\044\062\045\103\046\061\050" +
    "\116\052\102\054\043\056\110\060\063\062\073\063\117" +
    "\064\100\066\054\067\075\001\001\000\002\001\001\000" +
    "\062\027\263\030\111\031\051\032\076\033\044\034\045" +
    "\035\071\037\105\041\060\042\101\043\104\044\062\045" +
    "\103\046\061\050\116\052\102\054\043\056\110\060\063" +
    "\062\073\063\117\064\100\066\054\067\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\060\270\062\121\063\117\064\100\066" +
    "\054\067\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\274\001\001\000\002\001" +
    "\001\000\044\040\303\041\302\042\101\043\104\044\062" +
    "\045\103\046\061\050\116\052\102\054\043\056\110\060" +
    "\063\062\121\063\117\064\100\066\054\067\075\001\001" +
    "\000\012\016\300\023\027\024\004\025\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\040" +
    "\306\041\302\042\101\043\104\044\062\045\103\046\061" +
    "\050\116\052\102\054\043\056\110\060\063\062\121\063" +
    "\117\064\100\066\054\067\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\027\024\004\025\315\001" +
    "\001\000\002\001\001\000\010\023\027\024\004\025\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\320\021" +
    "\325\026\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\022\331\037\327\041\060\042\101\043\104\044" +
    "\062\045\103\046\061\050\116\052\102\054\043\056\110" +
    "\060\063\062\073\063\117\064\100\066\054\067\075\001" +
    "\001\000\002\001\001\000\050\005\332\022\333\037\327" +
    "\041\060\042\101\043\104\044\062\045\103\046\061\050" +
    "\116\052\102\054\043\056\110\060\063\062\073\063\117" +
    "\064\100\066\054\067\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\022\336\037\327" +
    "\041\060\042\101\043\104\044\062\045\103\046\061\050" +
    "\116\052\102\054\043\056\110\060\063\062\073\063\117" +
    "\064\100\066\054\067\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\340\024\004\001\001\000\010" +
    "\014\341\017\342\026\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\345\026\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\363\001\001\000\004\073\352\001\001" +
    "\000\010\006\354\023\353\024\004\001\001\000\010\014" +
    "\341\017\361\026\273\001\001\000\006\023\355\024\004" +
    "\001\001\000\010\014\341\017\357\026\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\365\023\353\024\004\001\001\000\006\023\355\024\004" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("\tParsing error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

      if (s.left >= 0) {
        m.append(" in line " + (s.left +1 ));
        if (s.right >= 0) {
          m.append(", column " + (s.right + 1));
        }
      }
    }
    m.append(" : " + message);
    System.err.println(m);
  }

  public Parser(InputStream inp) {
    this(new Yylex(inp));
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  static cnx.symbol.Symbol symbol(String s) {
    return cnx.symbol.Symbol.symbol(s);
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // constant ::= CHR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // constant ::= NUM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // primary_expression ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String("("+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // primary_expression ::= STR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // primary_expression ::= constant 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primary_expression ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arguments ::= assignment_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arguments ::= arguments COMMA assignment_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // postfix_expression ::= primary_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // postfix_expression ::= postfix_expression DEC 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String("("+x+"--"+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // postfix_expression ::= postfix_expression INC 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String("("+x+"++"+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // postfix_expression ::= postfix_expression PTR ID 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(->"+x+" "+i+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // postfix_expression ::= postfix_expression DOT ID 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(."+x+" "+i+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // postfix_expression ::= postfix_expression LPAREN RPAREN 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new String("(Func"+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // postfix_expression ::= postfix_expression LPAREN arguments RPAREN 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String("(Func"+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // postfix_expression ::= postfix_expression LBRACK expression RBRACK 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String("([] "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // unary_operator ::= NOT 
            {
              String RESULT =null;
		RESULT=new String("!");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unary_operator ::= BITNOT 
            {
              String RESULT =null;
		RESULT=new String("~");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unary_operator ::= MINUS 
            {
              String RESULT =null;
		RESULT=new String("-");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unary_operator ::= PLUS 
            {
              String RESULT =null;
		RESULT=new String("+");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unary_operator ::= ASTER 
            {
              String RESULT =null;
		RESULT=new String("*");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unary_operator ::= BITAND 
            {
              String RESULT =null;
		RESULT=new String("&");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String("(sizeof "+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unary_expression ::= SIZEOF unary_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(sizeof "+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unary_expression ::= unary_operator cast_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unary_expression ::= DEC unary_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(-- "+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unary_expression ::= INC unary_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(++ "+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unary_expression ::= postfix_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // type_name ::= type_specifier 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type_name ::= type_name ASTER 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x+"*");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cast_expression ::= unary_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // multiplicative_operator ::= MOD 
            {
              String RESULT =null;
		RESULT=new String("%");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multiplicative_operator ::= DIVIDE 
            {
              String RESULT =null;
		RESULT=new String("/");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // multiplicative_operator ::= ASTER 
            {
              String RESULT =null;
		RESULT=new String("*");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // multiplicative_expression ::= cast_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+y+" "+x+" "+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // additive_operator ::= MINUS 
            {
              String RESULT =null;
		RESULT=new String("-");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // additive_operator ::= PLUS 
            {
              String RESULT =null;
		RESULT=new String("+");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // additive_expression ::= multiplicative_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+y+" "+x+" "+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // shift_operator ::= SHR 
            {
              String RESULT =null;
		RESULT=new String(">>");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // shift_operator ::= SHL 
            {
              String RESULT =null;
		RESULT=new String("<<");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // shift_expression ::= additive_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+y+" "+x+" "+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relational_operator ::= GE 
            {
              String RESULT =null;
		RESULT=new String(">=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relational_operator ::= LE 
            {
              String RESULT =null;
		RESULT=new String("<=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relational_operator ::= GT 
            {
              String RESULT =null;
		RESULT=new String(">");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relational_operator ::= LT 
            {
              String RESULT =null;
		RESULT=new String("<");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relational_expression ::= shift_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+y+" "+x+" "+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // equality_operator ::= NE 
            {
              String RESULT =null;
		RESULT=new String("!=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // equality_operator ::= EQ 
            {
              String RESULT =null;
		RESULT=new String("==");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // equality_expression ::= relational_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+y+" "+x+" "+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // and_expression ::= equality_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // and_expression ::= and_expression BITAND equality_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(& "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exclusive_or_expression ::= and_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exclusive_or_expression ::= exclusive_or_expression INDEX and_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(^"+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // inclusive_or_expression ::= exclusive_or_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inclusive_or_expression ::= inclusive_or_expression BITOR exclusive_or_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(| "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // logical_and_expression ::= inclusive_or_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // logical_and_expression ::= logical_and_expression AND inclusive_or_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(&& "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // logical_or_expression ::= logical_and_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(|| "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constant_expression ::= logical_or_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignment_operator ::= ORASS 
            {
              String RESULT =null;
		RESULT=new String("|=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignment_operator ::= XORASS 
            {
              String RESULT =null;
		RESULT=new String("^=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment_operator ::= ANDASS 
            {
              String RESULT =null;
		RESULT=new String("&=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_operator ::= SHRASS 
            {
              String RESULT =null;
		RESULT=new String(">>=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_operator ::= SHLASS 
            {
              String RESULT =null;
		RESULT=new String("<<=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_operator ::= SUBASS 
            {
              String RESULT =null;
		RESULT=new String("-=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_operator ::= ADDASS 
            {
              String RESULT =null;
		RESULT=new String("+=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_operator ::= MODASS 
            {
              String RESULT =null;
		RESULT=new String("%=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_operator ::= DIVASS 
            {
              String RESULT =null;
		RESULT=new String("/=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_operator ::= MULASS 
            {
              String RESULT =null;
		RESULT=new String("*=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_operator ::= ASSIGN 
            {
              String RESULT =null;
		RESULT=new String("=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+y+" "+x+" "+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_expression ::= logical_or_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= assignment_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression COMMA assignment_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fors ::= expression SEMICOLON 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fors",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fors ::= SEMICOLON 
            {
              String RESULT =null;
		RESULT=new String("");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fors",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // jump_statement ::= RETURN fors 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(return "+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // jump_statement ::= BREAK SEMICOLON 
            {
              String RESULT =null;
		RESULT=new String("(break)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // jump_statement ::= CONTINUE SEMICOLON 
            {
              String RESULT =null;
		RESULT=new String("(continue)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // iteration_statement ::= FOR LPAREN fors fors RPAREN statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(for "+x+" "+y+" "+s+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // iteration_statement ::= FOR LPAREN fors fors expression RPAREN statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(for "+x+" "+y+" "+z+" "+s+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iteration_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(while "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(if "+x+" "+y+" else "+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // selection_statement ::= IF LPAREN expression RPAREN statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(if "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statements ::= statements statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statements ::= 
            {
              String RESULT =null;
		RESULT=new String("");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declarations ::= declarations declaration 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declarations ::= 
            {
              String RESULT =null;
		RESULT=new String("");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // compound_statement ::= LBRACE NT$4 declarations statements RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ParserTest.endScope();RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$4 ::= 
            {
              String RESULT =null;
ParserTest.beginScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_statement ::= SEMICOLON 
            {
              String RESULT =null;
		RESULT=new String("");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_statement ::= expression SEMICOLON 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= jump_statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= iteration_statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= selection_statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= compound_statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= expression_statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // plain_declarator ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(i.toString());if(ParserTest.isTypedef())ParserTest.addTypeID(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // plain_declarator ::= ASTER plain_declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(* "+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constant_expressions ::= constant_expressions LBRACK constant_expression RBRACK 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x+"(["+y+"])");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expressions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constant_expressions ::= LBRACK constant_expression RBRACK 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String("(["+x+"])");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expressions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declarator ::= plain_declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declarator ::= plain_declarator constant_expressions 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declarator ::= plain_declarator LPAREN RPAREN 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declarator ::= plain_declarator LPAREN parameters RPAREN 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // plain_declaration ::= type_specifier declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_or_union ::= UNION 
            {
              String RESULT =null;
		ParserTest.beginRecorddef();RESULT=new String("union");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_or_union ::= STRUCT 
            {
              String RESULT =null;
		System.out.println("CNX");ParserTest.beginRecorddef();RESULT=new String("struct");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structs ::= structs type_specifier declarators SEMICOLON 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x+" "+y+" "+z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structs ::= type_specifier declarators SEMICOLON 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_specifier ::= struct_or_union ID 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ParserTest.endRecorddef();RESULT=new String(x+" "+i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_specifier ::= struct_or_union LBRACE NT$3 structs RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$3 ::= 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
ParserTest.endRecorddef();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_specifier ::= struct_or_union ID NT$2 LBRACE structs RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x+" "+i+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$2 ::= 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
ParserTest.endRecorddef();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_specifier ::= TYPEID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_specifier ::= INT 
            {
              String RESULT =null;
		RESULT=new String("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_specifier ::= CHAR 
            {
              String RESULT =null;
		RESULT=new String("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_specifier ::= VOID 
            {
              String RESULT =null;
		RESULT=new String("void");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // initializers ::= initializers COMMA initializer 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // initializers ::= initializer 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // initializer ::= LBRACE initializers RBRACE 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initializer ::= assignment_expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // init_declarator ::= declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // init_declarator ::= declarator ASSIGN initializer 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("(= "+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // init_declarators ::= init_declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // init_declarators ::= init_declarators COMMA init_declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarators ::= declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarators ::= declarators COMMA declarator 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // plain_declarations ::= plain_declarations COMMA plain_declaration 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarations",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plain_declarations ::= COMMA plain_declaration 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarations",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= plain_declaration 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+x+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= plain_declaration COMMA ELLIPSIS 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new String("("+x+"...)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= plain_declaration plain_declarations 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameters ::= plain_declaration plain_declarations COMMA ELLIPSIS 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new String("("+x+" "+y+"...)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_definition ::= type_specifier plain_declarator LPAREN RPAREN compound_statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+x+" "+y+"()"+z+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_definition ::= type_specifier plain_declarator LPAREN parameters RPAREN compound_statement 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String("("+x+" "+y+z+s+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= type_specifier SEMICOLON 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= type_specifier NT$1 init_declarators SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ParserTest.endVardef();RESULT=new String("("+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
ParserTest.beginVardef();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= TYPEDEF NT$0 type_specifier declarators SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ParserTest.endTypedef();RESULT=new String("("+x+" "+y+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
ParserTest.beginTypedef();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= function_definition 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= declaration 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program prog 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x+" "+y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= prog 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new String(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

