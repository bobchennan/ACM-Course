/* The following code was generated by JFlex 1.4.3 on 13-4-12 ÉÏÎç12:08 */

package cnx.syntactic;

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13-4-12 ÉÏÎç12:08 from the specification file
 * <tt>cnx.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner, Symbols {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYSTRING = 4;
  public static final int YYCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int YYPRE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\1\1\0\1\10\1\2\22\0\1\10\1\65\1\13"+
    "\1\12\1\3\1\63\1\56\1\11\1\43\1\44\1\15\1\61\1\46"+
    "\1\62\1\66\1\14\1\5\11\4\1\0\1\45\1\57\1\47\1\60"+
    "\2\0\27\7\1\6\2\7\1\52\1\67\1\53\1\55\1\3\1\0"+
    "\1\31\1\40\1\27\1\22\1\21\1\23\1\7\1\30\1\26\1\7"+
    "\1\41\1\36\1\7\1\33\1\25\1\20\1\7\1\32\1\34\1\16"+
    "\1\35\1\24\1\37\1\6\1\17\1\42\1\50\1\54\1\51\1\64"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\13\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\3\35\1\36"+
    "\1\37\1\36\1\40\1\0\1\41\3\0\1\42\1\43"+
    "\1\44\1\45\4\3\1\46\11\3\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\0\1\70"+
    "\1\71\2\0\1\72\1\73\1\74\1\75\1\4\1\76"+
    "\1\5\2\3\1\77\1\3\1\100\10\3\1\101\1\102"+
    "\1\103\1\104\1\0\1\3\1\105\1\106\1\3\1\107"+
    "\6\3\1\110\5\3\1\111\1\112\1\113\2\3\1\114"+
    "\1\115\1\116\1\117\1\3\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\344\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\344\0\344\0\344\0\344\0\u051f\0\344\0\344"+
    "\0\344\0\344\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\344\0\u0720\0\u0759\0\344\0\u0792\0\u07cb"+
    "\0\u0804\0\344\0\u083d\0\344\0\u0876\0\344\0\u08af\0\u08e8"+
    "\0\u0921\0\344\0\344\0\344\0\344\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0156\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\344\0\344\0\344\0\344\0\344"+
    "\0\344\0\344\0\u0c3f\0\344\0\u0c78\0\344\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\u0cb1\0\344\0\344\0\u0cea"+
    "\0\u0d23\0\344\0\344\0\344\0\344\0\u08af\0\344\0\344"+
    "\0\u0d5c\0\u0d95\0\u0156\0\u0dce\0\u0156\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\344\0\344\0\344"+
    "\0\344\0\u0fcf\0\u1008\0\u0156\0\u0156\0\u1041\0\u0156\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\344\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u0156\0\u0156\0\u0156\0\u12ed\0\u1326"+
    "\0\u0156\0\u0156\0\u0156\0\u0156\0\u135f\0\u0156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\2\10\1\6"+
    "\1\13\1\5\1\14\1\15\1\16\1\17\2\10\1\20"+
    "\1\10\1\21\1\22\1\10\1\23\1\24\2\10\1\25"+
    "\1\10\1\26\1\27\1\10\1\30\1\31\2\10\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\5\1\6\14\56\1\57\1\60"+
    "\53\56\1\61\1\62\1\63\10\61\1\64\53\61\1\65"+
    "\1\0\1\56\1\66\67\56\72\0\1\6\72\0\5\10"+
    "\6\0\25\10\32\0\2\11\67\0\2\11\1\67\62\0"+
    "\1\70\1\0\10\70\1\71\56\70\15\0\1\72\31\0"+
    "\1\73\35\0\1\74\32\0\1\75\24\0\5\10\6\0"+
    "\1\10\1\76\23\10\31\0\5\10\6\0\20\10\1\77"+
    "\4\10\31\0\5\10\6\0\7\10\1\100\15\10\31\0"+
    "\5\10\6\0\7\10\1\101\15\10\31\0\5\10\6\0"+
    "\5\10\1\102\7\10\1\103\7\10\31\0\5\10\6\0"+
    "\7\10\1\104\2\10\1\105\12\10\31\0\5\10\6\0"+
    "\3\10\1\106\21\10\31\0\5\10\6\0\1\107\7\10"+
    "\1\110\14\10\31\0\5\10\6\0\15\10\1\111\7\10"+
    "\31\0\5\10\6\0\12\10\1\112\12\10\31\0\5\10"+
    "\6\0\14\10\1\113\10\10\75\0\1\114\70\0\1\115"+
    "\4\0\1\116\63\0\1\117\70\0\1\120\6\0\1\121"+
    "\61\0\1\122\7\0\1\123\60\0\1\124\10\0\1\125"+
    "\57\0\1\126\11\0\1\127\56\0\1\130\10\0\1\131"+
    "\1\0\1\132\55\0\1\133\70\0\1\134\107\0\1\135"+
    "\17\0\1\136\67\0\1\137\54\0\1\61\1\0\11\61"+
    "\1\0\53\61\2\0\1\61\1\62\11\61\1\0\53\61"+
    "\3\0\2\140\1\0\2\141\2\0\1\140\2\0\1\142"+
    "\2\0\1\143\14\0\1\144\33\0\1\145\1\140\4\0"+
    "\4\146\6\0\25\146\37\0\1\147\70\0\1\150\62\0"+
    "\5\10\6\0\2\10\1\151\22\10\31\0\5\10\6\0"+
    "\16\10\1\152\6\10\31\0\5\10\6\0\14\10\1\153"+
    "\10\10\31\0\5\10\6\0\10\10\1\154\14\10\31\0"+
    "\5\10\6\0\1\155\24\10\31\0\5\10\6\0\15\10"+
    "\1\156\7\10\31\0\5\10\6\0\13\10\1\157\11\10"+
    "\31\0\5\10\6\0\1\160\24\10\31\0\5\10\6\0"+
    "\14\10\1\161\10\10\31\0\5\10\6\0\24\10\1\162"+
    "\31\0\5\10\6\0\10\10\1\163\14\10\31\0\5\10"+
    "\6\0\10\10\1\164\14\10\31\0\5\10\6\0\3\10"+
    "\1\165\21\10\75\0\1\166\70\0\1\167\107\0\1\170"+
    "\3\0\2\140\5\0\1\140\56\0\1\171\1\140\4\0"+
    "\2\172\66\0\5\10\6\0\3\10\1\173\21\10\31\0"+
    "\5\10\6\0\3\10\1\174\21\10\31\0\5\10\6\0"+
    "\4\10\1\175\20\10\31\0\5\10\6\0\1\176\24\10"+
    "\31\0\5\10\6\0\14\10\1\177\10\10\31\0\5\10"+
    "\6\0\17\10\1\200\5\10\31\0\5\10\6\0\17\10"+
    "\1\201\5\10\31\0\5\10\6\0\3\10\1\202\21\10"+
    "\31\0\5\10\6\0\7\10\1\203\15\10\31\0\5\10"+
    "\6\0\20\10\1\204\4\10\31\0\5\10\6\0\13\10"+
    "\1\205\11\10\32\0\2\206\66\0\5\10\6\0\4\10"+
    "\1\207\20\10\31\0\5\10\6\0\10\10\1\210\14\10"+
    "\31\0\5\10\6\0\14\10\1\211\10\10\31\0\5\10"+
    "\6\0\11\10\1\212\13\10\31\0\5\10\6\0\7\10"+
    "\1\213\15\10\31\0\5\10\6\0\15\10\1\214\7\10"+
    "\31\0\5\10\6\0\3\10\1\215\21\10\31\0\5\10"+
    "\6\0\23\10\1\216\1\10\31\0\5\10\6\0\3\10"+
    "\1\217\21\10\31\0\5\10\6\0\15\10\1\220\7\10"+
    "\31\0\5\10\6\0\15\10\1\221\7\10\31\0\5\10"+
    "\6\0\1\222\24\10\31\0\5\10\6\0\5\10\1\223"+
    "\17\10\31\0\5\10\6\0\5\10\1\224\17\10\31\0"+
    "\5\10\6\0\17\10\1\225\5\10\31\0\5\10\6\0"+
    "\3\10\1\226\21\10\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\5\1\1\11\15\1\4\11\1\1\4\11"+
    "\10\1\1\11\2\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\0\1\11\3\0\4\11\16\1\7\11\1\1\1\11"+
    "\1\1\7\11\1\0\2\11\2\0\4\11\1\1\2\11"+
    "\15\1\4\11\1\0\13\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private boolean commentCount = false;
	private StringBuffer str = new StringBuffer();

	private void err(String message) {
		System.out.println("Scanning error in line " + yyline + ", column " + yycolumn + ": " + message);
	}

	private java_cup.runtime.Symbol tok(int kind) {
		return new java_cup.runtime.Symbol(kind, yyline, yycolumn);
	}

	private java_cup.runtime.Symbol tok(int kind, Object value) {
		return new java_cup.runtime.Symbol(kind, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { /*System.out.println(yytext());*/return tok(LBRACK);
          }
        case 81: break;
        case 77: 
          { /*System.out.println(yytext());*/return tok(STRUCT);
          }
        case 82: break;
        case 59: 
          { str.append('\t');
          }
        case 83: break;
        case 6: 
          { str.setLength(0); yybegin(YYSTRING);
          }
        case 84: break;
        case 80: 
          { /*System.out.println(yytext());*/return tok(CONTINUE);
          }
        case 85: break;
        case 79: 
          { /*System.out.println(yytext());*/return tok(TYPEDEF);
          }
        case 86: break;
        case 11: 
          { /*System.out.println(yytext());*/return tok(SEMICOLON);
          }
        case 87: break;
        case 50: 
          { /*System.out.println(yytext());*/return tok(INC);
          }
        case 88: break;
        case 70: 
          { /*System.out.println(yytext());*/return tok(VOID);
          }
        case 89: break;
        case 62: 
          { /*System.out.println(yytext());*/return tok(CHR,new String(yytext()).charAt(1));
          }
        case 90: break;
        case 41: 
          { /*System.out.println(yytext());*/return tok(OR);
          }
        case 91: break;
        case 76: 
          { /*System.out.println(yytext());*/return tok(RETURN);
          }
        case 92: break;
        case 54: 
          { /*System.out.println(yytext());*/return tok(MODASS);
          }
        case 93: break;
        case 8: 
          { /*System.out.println(yytext());*/return tok(ASTER);
          }
        case 94: break;
        case 74: 
          { /*System.out.println(yytext());*/return tok(WHILE);
          }
        case 95: break;
        case 67: 
          { /*System.out.println(yytext());*/return tok(ELLIPSIS);
          }
        case 96: break;
        case 14: 
          { /*System.out.println(yytext());*/return tok(LBRACE);
          }
        case 97: break;
        case 5: 
          { System.out.println("cnx");yybegin(YYPRE);
          }
        case 98: break;
        case 55: 
          { /*System.out.println(yytext());*/return tok(NE) ;
          }
        case 99: break;
        case 12: 
          { /*System.out.println(yytext());*/return tok(COMMA);
          }
        case 100: break;
        case 63: 
          { /*System.out.println(yytext());*/return tok(FOR);
          }
        case 101: break;
        case 69: 
          { /*System.out.println(yytext());*/return tok(ELSE);
          }
        case 102: break;
        case 73: 
          { /*System.out.println(yytext());*/return tok(UNION);
          }
        case 103: break;
        case 47: 
          { /*System.out.println(yytext());*/return tok(GE);
          }
        case 104: break;
        case 38: 
          { /*System.out.println(yytext());*/return tok(IF);
          }
        case 105: break;
        case 25: 
          { /*System.out.println(yytext());*/return tok(MOD);
          }
        case 106: break;
        case 37: 
          { /*System.out.println(yytext());*/return tok(MULASS);
          }
        case 107: break;
        case 40: 
          { /*System.out.println(yytext());*/return tok(ORASS);
          }
        case 108: break;
        case 66: 
          { /*System.out.println(yytext());*/return tok(SHRASS);
          }
        case 109: break;
        case 61: 
          { str.append('\\');
          }
        case 110: break;
        case 7: 
          { /*System.out.println(yytext());*/return tok(DIVIDE);
          }
        case 111: break;
        case 65: 
          { /*System.out.println(yytext());*/return tok(SHLASS);
          }
        case 112: break;
        case 45: 
          { /*System.out.println(yytext());*/return tok(LE);
          }
        case 113: break;
        case 42: 
          { /*System.out.println(yytext());*/return tok(XORASS);
          }
        case 114: break;
        case 10: 
          { /*System.out.println(yytext());*/return tok(RPAREN);
          }
        case 115: break;
        case 52: 
          { /*System.out.println(yytext());*/return tok(PTR);
          }
        case 116: break;
        case 49: 
          { /*System.out.println(yytext());*/return tok(ADDASS);
          }
        case 117: break;
        case 68: 
          { /* do nothing */
          }
        case 118: break;
        case 13: 
          { /*System.out.println(yytext());*/return tok(ASSIGN);
          }
        case 119: break;
        case 34: 
          { commentCount = true; yybegin(YYCOMMENT);
          }
        case 120: break;
        case 28: 
          { /*System.out.println(yytext());*/return tok(DOT);
          }
        case 121: break;
        case 56: 
          { commentCount=true;
          }
        case 122: break;
        case 64: 
          { /*System.out.println(yytext());*/return tok(INT);
          }
        case 123: break;
        case 23: 
          { /*System.out.println(yytext());*/return tok(PLUS);
          }
        case 124: break;
        case 44: 
          { /*System.out.println(yytext());*/return tok(AND);
          }
        case 125: break;
        case 48: 
          { /*System.out.println(yytext());*/return tok(SHR);
          }
        case 126: break;
        case 51: 
          { /*System.out.println(yytext());*/return tok(SUBASS);
          }
        case 127: break;
        case 1: 
          { throw new RuntimeException("Illegal character " + yytext() + " in line " + (yyline + 1) + ", column " + (yycolumn + 1));
          }
        case 128: break;
        case 27: 
          { /*System.out.println(yytext());*/return tok(NOT);
          }
        case 129: break;
        case 9: 
          { /*System.out.println(yytext());*/return tok(LPAREN);
          }
        case 130: break;
        case 2: 
          { /* skip */
          }
        case 131: break;
        case 36: 
          { err("Comment symbol do not match!");
          }
        case 132: break;
        case 33: 
          { yybegin(YYINITIAL);
          }
        case 133: break;
        case 43: 
          { /*System.out.println(yytext());*/return tok(ANDASS);
          }
        case 134: break;
        case 18: 
          { /*System.out.println(yytext());*/return tok(BITOR);
          }
        case 135: break;
        case 72: 
          { int n = Integer.parseInt(yytext().substring(1, 4));
		if (n > 255) err("String presentation error (\\ddd exceeded 255)!");
		else str.append((char) n);
          }
        case 136: break;
        case 46: 
          { /*System.out.println(yytext());*/return tok(SHL);
          }
        case 137: break;
        case 17: 
          { /*System.out.println(yytext());*/return tok(RBRACK);
          }
        case 138: break;
        case 71: 
          { /*System.out.println(yytext());*/return tok(CHAR);
          }
        case 139: break;
        case 19: 
          { /*System.out.println(yytext());*/return tok(INDEX);
          }
        case 140: break;
        case 75: 
          { /*System.out.println(yytext());*/return tok(BREAK);
          }
        case 141: break;
        case 53: 
          { /*System.out.println(yytext());*/return tok(DEC);
          }
        case 142: break;
        case 31: 
          { err("String presentation error (unexpected line terminator)!");
          }
        case 143: break;
        case 30: 
          { str.append(yytext());
          }
        case 144: break;
        case 22: 
          { /*System.out.println(yytext());*/return tok(GT);
          }
        case 145: break;
        case 60: 
          { str.append('\n');
          }
        case 146: break;
        case 3: 
          { boolean ty=false;
		if(ParserTest.isVardef())ty=false;
		else if(ParserTest.isRecorddef())ty=false;
		else if(ParserTest.isTypeID(yytext()))ty=true;
		else ty=false;
		/*System.out.println(yytext()+" "+(ty?"TYPE":"ID"));*/
		if(ty)return tok(TYPEID,yytext());
		else return tok(ID,yytext());
          }
        case 147: break;
        case 35: 
          { /*System.out.println(yytext());*/return tok(DIVASS);
          }
        case 148: break;
        case 58: 
          { str.append('\"');
          }
        case 149: break;
        case 20: 
          { /*System.out.println(yytext());*/return tok(BITAND);
          }
        case 150: break;
        case 57: 
          { if (commentCount == true) {commentCount=false;yybegin(YYINITIAL);}
          }
        case 151: break;
        case 39: 
          { /*System.out.println(yytext());*/return tok(EQ);
          }
        case 152: break;
        case 32: 
          { yybegin(YYINITIAL); return tok(STR, str.toString());
          }
        case 153: break;
        case 78: 
          { /*System.out.println(yytext());*/return tok(SIZEOF);
          }
        case 154: break;
        case 24: 
          { /*System.out.println(yytext());*/return tok(MINUS);
          }
        case 155: break;
        case 26: 
          { /*System.out.println(yytext());*/return tok(BITNOT);
          }
        case 156: break;
        case 4: 
          { /*System.out.println(yytext());*/return tok(NUM, new Integer(yytext()));
          }
        case 157: break;
        case 15: 
          { /*System.out.println(yytext());*/return tok(RBRACE);
          }
        case 158: break;
        case 21: 
          { /*System.out.println(yytext());*/return tok(LT);
          }
        case 159: break;
        case 29: 
          { 
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	{
		if (yystate() == YYCOMMENT) {
			err("Comment symbol do not match (EOF)!");
		}
		return tok(EOF, null);
	}
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
